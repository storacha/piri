// Code generated by error-binding-generator. DO NOT EDIT.

package evmerrors

import (
	"fmt"
	"math/big"

	"github.com/ethereum/go-ethereum/common"
)

// ContractError is the base interface for all contract errors
type ContractError interface {
	error
	ErrorName() string
	ErrorSelector() string
}


// CDNPaymentAlreadyTerminated represents the CDNPaymentAlreadyTerminated error
type CDNPaymentAlreadyTerminated struct {
	DataSetId *big.Int
}

func (e *CDNPaymentAlreadyTerminated) Error() string {
	return fmt.Sprintf("CDNPaymentAlreadyTerminated(DataSetId=%v)", e.DataSetId)
}

func (e *CDNPaymentAlreadyTerminated) ErrorName() string {
	return "CDNPaymentAlreadyTerminated"
}

func (e *CDNPaymentAlreadyTerminated) ErrorSelector() string {
	return "0x8b82bf2b"
}


// CacheMissPaymentAlreadyTerminated represents the CacheMissPaymentAlreadyTerminated error
type CacheMissPaymentAlreadyTerminated struct {
	DataSetId *big.Int
}

func (e *CacheMissPaymentAlreadyTerminated) Error() string {
	return fmt.Sprintf("CacheMissPaymentAlreadyTerminated(DataSetId=%v)", e.DataSetId)
}

func (e *CacheMissPaymentAlreadyTerminated) ErrorName() string {
	return "CacheMissPaymentAlreadyTerminated"
}

func (e *CacheMissPaymentAlreadyTerminated) ErrorSelector() string {
	return "0x34fee1da"
}


// CallerNotPayer represents the CallerNotPayer error
type CallerNotPayer struct {
	DataSetId *big.Int
	ExpectedPayer common.Address
	Caller common.Address
}

func (e *CallerNotPayer) Error() string {
	return fmt.Sprintf("CallerNotPayer(DataSetId=%v, ExpectedPayer=%s, Caller=%s)", e.DataSetId, e.ExpectedPayer.Hex(), e.Caller.Hex())
}

func (e *CallerNotPayer) ErrorName() string {
	return "CallerNotPayer"
}

func (e *CallerNotPayer) ErrorSelector() string {
	return "0x1176a89f"
}


// CallerNotPayerOrPayee represents the CallerNotPayerOrPayee error
type CallerNotPayerOrPayee struct {
	DataSetId *big.Int
	ExpectedPayer common.Address
	ExpectedPayee common.Address
	Caller common.Address
}

func (e *CallerNotPayerOrPayee) Error() string {
	return fmt.Sprintf("CallerNotPayerOrPayee(DataSetId=%v, ExpectedPayer=%s, ExpectedPayee=%s, Caller=%s)", e.DataSetId, e.ExpectedPayer.Hex(), e.ExpectedPayee.Hex(), e.Caller.Hex())
}

func (e *CallerNotPayerOrPayee) ErrorName() string {
	return "CallerNotPayerOrPayee"
}

func (e *CallerNotPayerOrPayee) ErrorSelector() string {
	return "0x7e47554b"
}


// CallerNotPayments represents the CallerNotPayments error
type CallerNotPayments struct {
	Expected common.Address
	Actual common.Address
}

func (e *CallerNotPayments) Error() string {
	return fmt.Sprintf("CallerNotPayments(Expected=%s, Actual=%s)", e.Expected.Hex(), e.Actual.Hex())
}

func (e *CallerNotPayments) ErrorName() string {
	return "CallerNotPayments"
}

func (e *CallerNotPayments) ErrorSelector() string {
	return "0xed73634e"
}


// CannotModifyTerminatedRailBeyondEndEpoch represents the CannotModifyTerminatedRailBeyondEndEpoch error
type CannotModifyTerminatedRailBeyondEndEpoch struct {
	RailId *big.Int
	MaxSettlementEpoch *big.Int
	BlockNumber *big.Int
}

func (e *CannotModifyTerminatedRailBeyondEndEpoch) Error() string {
	return fmt.Sprintf("CannotModifyTerminatedRailBeyondEndEpoch(RailId=%v, MaxSettlementEpoch=%v, BlockNumber=%v)", e.RailId, e.MaxSettlementEpoch, e.BlockNumber)
}

func (e *CannotModifyTerminatedRailBeyondEndEpoch) ErrorName() string {
	return "CannotModifyTerminatedRailBeyondEndEpoch"
}

func (e *CannotModifyTerminatedRailBeyondEndEpoch) ErrorSelector() string {
	return "0x323d3c67"
}


// CannotSettleFutureEpochs represents the CannotSettleFutureEpochs error
type CannotSettleFutureEpochs struct {
	RailId *big.Int
	MaxAllowedEpoch *big.Int
	AttemptedEpoch *big.Int
}

func (e *CannotSettleFutureEpochs) Error() string {
	return fmt.Sprintf("CannotSettleFutureEpochs(RailId=%v, MaxAllowedEpoch=%v, AttemptedEpoch=%v)", e.RailId, e.MaxAllowedEpoch, e.AttemptedEpoch)
}

func (e *CannotSettleFutureEpochs) ErrorName() string {
	return "CannotSettleFutureEpochs"
}

func (e *CannotSettleFutureEpochs) ErrorSelector() string {
	return "0x1d932033"
}


// CannotSettleTerminatedRailBeforeMaxEpoch represents the CannotSettleTerminatedRailBeforeMaxEpoch error
type CannotSettleTerminatedRailBeforeMaxEpoch struct {
	RailId *big.Int
	RequiredBlock *big.Int
	CurrentBlock *big.Int
}

func (e *CannotSettleTerminatedRailBeforeMaxEpoch) Error() string {
	return fmt.Sprintf("CannotSettleTerminatedRailBeforeMaxEpoch(RailId=%v, RequiredBlock=%v, CurrentBlock=%v)", e.RailId, e.RequiredBlock, e.CurrentBlock)
}

func (e *CannotSettleTerminatedRailBeforeMaxEpoch) ErrorName() string {
	return "CannotSettleTerminatedRailBeforeMaxEpoch"
}

func (e *CannotSettleTerminatedRailBeforeMaxEpoch) ErrorSelector() string {
	return "0x20827009"
}


// ChallengeWindowTooEarly represents the ChallengeWindowTooEarly error
type ChallengeWindowTooEarly struct {
	DataSetId *big.Int
	WindowStart *big.Int
	NowBlock *big.Int
}

func (e *ChallengeWindowTooEarly) Error() string {
	return fmt.Sprintf("ChallengeWindowTooEarly(DataSetId=%v, WindowStart=%v, NowBlock=%v)", e.DataSetId, e.WindowStart, e.NowBlock)
}

func (e *ChallengeWindowTooEarly) ErrorName() string {
	return "ChallengeWindowTooEarly"
}

func (e *ChallengeWindowTooEarly) ErrorSelector() string {
	return "0xc41d66e8"
}


// CommissionExceedsMaximum represents the CommissionExceedsMaximum error
type CommissionExceedsMaximum struct {
	CommissionType uint8
	Max *big.Int
	Actual *big.Int
}

func (e *CommissionExceedsMaximum) Error() string {
	return fmt.Sprintf("CommissionExceedsMaximum(CommissionType=%v, Max=%v, Actual=%v)", e.CommissionType, e.Max, e.Actual)
}

func (e *CommissionExceedsMaximum) ErrorName() string {
	return "CommissionExceedsMaximum"
}

func (e *CommissionExceedsMaximum) ErrorSelector() string {
	return "0x45d4d477"
}


// CommissionRateTooHigh represents the CommissionRateTooHigh error
type CommissionRateTooHigh struct {
	MaxAllowed *big.Int
	Actual *big.Int
}

func (e *CommissionRateTooHigh) Error() string {
	return fmt.Sprintf("CommissionRateTooHigh(MaxAllowed=%v, Actual=%v)", e.MaxAllowed, e.Actual)
}

func (e *CommissionRateTooHigh) ErrorName() string {
	return "CommissionRateTooHigh"
}

func (e *CommissionRateTooHigh) ErrorSelector() string {
	return "0x49c4e4f0"
}


// CurrentLockupLessThanOldLockup represents the CurrentLockupLessThanOldLockup error
type CurrentLockupLessThanOldLockup struct {
	Token common.Address
	From common.Address
	OldLockup *big.Int
	CurrentLockup *big.Int
}

func (e *CurrentLockupLessThanOldLockup) Error() string {
	return fmt.Sprintf("CurrentLockupLessThanOldLockup(Token=%s, From=%s, OldLockup=%v, CurrentLockup=%v)", e.Token.Hex(), e.From.Hex(), e.OldLockup, e.CurrentLockup)
}

func (e *CurrentLockupLessThanOldLockup) ErrorName() string {
	return "CurrentLockupLessThanOldLockup"
}

func (e *CurrentLockupLessThanOldLockup) ErrorSelector() string {
	return "0x92dfe5fc"
}


// DataSetNotFoundForRail represents the DataSetNotFoundForRail error
type DataSetNotFoundForRail struct {
	RailId *big.Int
}

func (e *DataSetNotFoundForRail) Error() string {
	return fmt.Sprintf("DataSetNotFoundForRail(RailId=%v)", e.RailId)
}

func (e *DataSetNotFoundForRail) ErrorName() string {
	return "DataSetNotFoundForRail"
}

func (e *DataSetNotFoundForRail) ErrorSelector() string {
	return "0x1f7a6b73"
}


// DataSetNotRegistered represents the DataSetNotRegistered error
type DataSetNotRegistered struct {
	DataSetId *big.Int
}

func (e *DataSetNotRegistered) Error() string {
	return fmt.Sprintf("DataSetNotRegistered(DataSetId=%v)", e.DataSetId)
}

func (e *DataSetNotRegistered) ErrorName() string {
	return "DataSetNotRegistered"
}

func (e *DataSetNotRegistered) ErrorSelector() string {
	return "0x8a961ba3"
}


// DataSetPaymentAlreadyTerminated represents the DataSetPaymentAlreadyTerminated error
type DataSetPaymentAlreadyTerminated struct {
	DataSetId *big.Int
}

func (e *DataSetPaymentAlreadyTerminated) Error() string {
	return fmt.Sprintf("DataSetPaymentAlreadyTerminated(DataSetId=%v)", e.DataSetId)
}

func (e *DataSetPaymentAlreadyTerminated) ErrorName() string {
	return "DataSetPaymentAlreadyTerminated"
}

func (e *DataSetPaymentAlreadyTerminated) ErrorSelector() string {
	return "0x211a40c0"
}


// DataSetPaymentBeyondEndEpoch represents the DataSetPaymentBeyondEndEpoch error
type DataSetPaymentBeyondEndEpoch struct {
	DataSetId *big.Int
	PdpEndEpoch *big.Int
	CurrentBlock *big.Int
}

func (e *DataSetPaymentBeyondEndEpoch) Error() string {
	return fmt.Sprintf("DataSetPaymentBeyondEndEpoch(DataSetId=%v, PdpEndEpoch=%v, CurrentBlock=%v)", e.DataSetId, e.PdpEndEpoch, e.CurrentBlock)
}

func (e *DataSetPaymentBeyondEndEpoch) ErrorName() string {
	return "DataSetPaymentBeyondEndEpoch"
}

func (e *DataSetPaymentBeyondEndEpoch) ErrorSelector() string {
	return "0xd7c45de5"
}


// DivisionByZero represents the DivisionByZero error
type DivisionByZero struct {
}

func (e *DivisionByZero) Error() string {
	return "DivisionByZero()"
}

func (e *DivisionByZero) ErrorName() string {
	return "DivisionByZero"
}

func (e *DivisionByZero) ErrorSelector() string {
	return "0x23d359a3"
}


// DuplicateMetadataKey represents the DuplicateMetadataKey error
type DuplicateMetadataKey struct {
	DataSetId *big.Int
	Key string
}

func (e *DuplicateMetadataKey) Error() string {
	return fmt.Sprintf("DuplicateMetadataKey(DataSetId=%v, Key=%s)", e.DataSetId, e.Key)
}

func (e *DuplicateMetadataKey) ErrorName() string {
	return "DuplicateMetadataKey"
}

func (e *DuplicateMetadataKey) ErrorSelector() string {
	return "0xca210722"
}


// ExtraDataRequired represents the ExtraDataRequired error
type ExtraDataRequired struct {
}

func (e *ExtraDataRequired) Error() string {
	return "ExtraDataRequired()"
}

func (e *ExtraDataRequired) ErrorName() string {
	return "ExtraDataRequired"
}

func (e *ExtraDataRequired) ErrorSelector() string {
	return "0x6a514229"
}


// FeeWithdrawalNativeTransferFailed represents the FeeWithdrawalNativeTransferFailed error
type FeeWithdrawalNativeTransferFailed struct {
	To common.Address
	Amount *big.Int
}

func (e *FeeWithdrawalNativeTransferFailed) Error() string {
	return fmt.Sprintf("FeeWithdrawalNativeTransferFailed(To=%s, Amount=%v)", e.To.Hex(), e.Amount)
}

func (e *FeeWithdrawalNativeTransferFailed) ErrorName() string {
	return "FeeWithdrawalNativeTransferFailed"
}

func (e *FeeWithdrawalNativeTransferFailed) ErrorSelector() string {
	return "0xfadd7dd5"
}


// FilBeamServiceNotConfigured represents the FilBeamServiceNotConfigured error
type FilBeamServiceNotConfigured struct {
	DataSetId *big.Int
}

func (e *FilBeamServiceNotConfigured) Error() string {
	return fmt.Sprintf("FilBeamServiceNotConfigured(DataSetId=%v)", e.DataSetId)
}

func (e *FilBeamServiceNotConfigured) ErrorName() string {
	return "FilBeamServiceNotConfigured"
}

func (e *FilBeamServiceNotConfigured) ErrorSelector() string {
	return "0x54f754fd"
}


// InsufficientCurrentLockup represents the InsufficientCurrentLockup error
type InsufficientCurrentLockup struct {
	Token common.Address
	From common.Address
	CurrentLockup *big.Int
	LockupReduction *big.Int
}

func (e *InsufficientCurrentLockup) Error() string {
	return fmt.Sprintf("InsufficientCurrentLockup(Token=%s, From=%s, CurrentLockup=%v, LockupReduction=%v)", e.Token.Hex(), e.From.Hex(), e.CurrentLockup, e.LockupReduction)
}

func (e *InsufficientCurrentLockup) ErrorName() string {
	return "InsufficientCurrentLockup"
}

func (e *InsufficientCurrentLockup) ErrorSelector() string {
	return "0x6fb42560"
}


// InsufficientFundsForOneTimePayment represents the InsufficientFundsForOneTimePayment error
type InsufficientFundsForOneTimePayment struct {
	Token common.Address
	From common.Address
	Required *big.Int
	Actual *big.Int
}

func (e *InsufficientFundsForOneTimePayment) Error() string {
	return fmt.Sprintf("InsufficientFundsForOneTimePayment(Token=%s, From=%s, Required=%v, Actual=%v)", e.Token.Hex(), e.From.Hex(), e.Required, e.Actual)
}

func (e *InsufficientFundsForOneTimePayment) ErrorName() string {
	return "InsufficientFundsForOneTimePayment"
}

func (e *InsufficientFundsForOneTimePayment) ErrorSelector() string {
	return "0xcdc76e7c"
}


// InsufficientFundsForSettlement represents the InsufficientFundsForSettlement error
type InsufficientFundsForSettlement struct {
	Token common.Address
	From common.Address
	Available *big.Int
	Required *big.Int
}

func (e *InsufficientFundsForSettlement) Error() string {
	return fmt.Sprintf("InsufficientFundsForSettlement(Token=%s, From=%s, Available=%v, Required=%v)", e.Token.Hex(), e.From.Hex(), e.Available, e.Required)
}

func (e *InsufficientFundsForSettlement) ErrorName() string {
	return "InsufficientFundsForSettlement"
}

func (e *InsufficientFundsForSettlement) ErrorSelector() string {
	return "0x707dfeab"
}


// InsufficientLockupForSettlement represents the InsufficientLockupForSettlement error
type InsufficientLockupForSettlement struct {
	Token common.Address
	From common.Address
	Available *big.Int
	Required *big.Int
}

func (e *InsufficientLockupForSettlement) Error() string {
	return fmt.Sprintf("InsufficientLockupForSettlement(Token=%s, From=%s, Available=%v, Required=%v)", e.Token.Hex(), e.From.Hex(), e.Available, e.Required)
}

func (e *InsufficientLockupForSettlement) ErrorName() string {
	return "InsufficientLockupForSettlement"
}

func (e *InsufficientLockupForSettlement) ErrorSelector() string {
	return "0x18d8ed64"
}


// InsufficientNativeTokenForBurn represents the InsufficientNativeTokenForBurn error
type InsufficientNativeTokenForBurn struct {
	Required *big.Int
	Sent *big.Int
}

func (e *InsufficientNativeTokenForBurn) Error() string {
	return fmt.Sprintf("InsufficientNativeTokenForBurn(Required=%v, Sent=%v)", e.Required, e.Sent)
}

func (e *InsufficientNativeTokenForBurn) ErrorName() string {
	return "InsufficientNativeTokenForBurn"
}

func (e *InsufficientNativeTokenForBurn) ErrorSelector() string {
	return "0x3e2f02c1"
}


// InsufficientUnlockedFunds represents the InsufficientUnlockedFunds error
type InsufficientUnlockedFunds struct {
	Available *big.Int
	Requested *big.Int
}

func (e *InsufficientUnlockedFunds) Error() string {
	return fmt.Sprintf("InsufficientUnlockedFunds(Available=%v, Requested=%v)", e.Available, e.Requested)
}

func (e *InsufficientUnlockedFunds) ErrorName() string {
	return "InsufficientUnlockedFunds"
}

func (e *InsufficientUnlockedFunds) ErrorSelector() string {
	return "0xe610210c"
}


// InvalidChallengeCount represents the InvalidChallengeCount error
type InvalidChallengeCount struct {
	DataSetId *big.Int
	MinExpected *big.Int
	Actual *big.Int
}

func (e *InvalidChallengeCount) Error() string {
	return fmt.Sprintf("InvalidChallengeCount(DataSetId=%v, MinExpected=%v, Actual=%v)", e.DataSetId, e.MinExpected, e.Actual)
}

func (e *InvalidChallengeCount) ErrorName() string {
	return "InvalidChallengeCount"
}

func (e *InvalidChallengeCount) ErrorSelector() string {
	return "0x985bf88a"
}


// InvalidChallengeEpoch represents the InvalidChallengeEpoch error
type InvalidChallengeEpoch struct {
	DataSetId *big.Int
	MinAllowed *big.Int
	MaxAllowed *big.Int
	Actual *big.Int
}

func (e *InvalidChallengeEpoch) Error() string {
	return fmt.Sprintf("InvalidChallengeEpoch(DataSetId=%v, MinAllowed=%v, MaxAllowed=%v, Actual=%v)", e.DataSetId, e.MinAllowed, e.MaxAllowed, e.Actual)
}

func (e *InvalidChallengeEpoch) ErrorName() string {
	return "InvalidChallengeEpoch"
}

func (e *InvalidChallengeEpoch) ErrorSelector() string {
	return "0x25a0c7f7"
}


// InvalidChallengeWindowSize represents the InvalidChallengeWindowSize error
type InvalidChallengeWindowSize struct {
	MaxProvingPeriod *big.Int
	ChallengeWindowSize *big.Int
}

func (e *InvalidChallengeWindowSize) Error() string {
	return fmt.Sprintf("InvalidChallengeWindowSize(MaxProvingPeriod=%v, ChallengeWindowSize=%v)", e.MaxProvingPeriod, e.ChallengeWindowSize)
}

func (e *InvalidChallengeWindowSize) ErrorName() string {
	return "InvalidChallengeWindowSize"
}

func (e *InvalidChallengeWindowSize) ErrorSelector() string {
	return "0x5d0ad0ad"
}


// InvalidDataSetId represents the InvalidDataSetId error
type InvalidDataSetId struct {
	DataSetId *big.Int
}

func (e *InvalidDataSetId) Error() string {
	return fmt.Sprintf("InvalidDataSetId(DataSetId=%v)", e.DataSetId)
}

func (e *InvalidDataSetId) ErrorName() string {
	return "InvalidDataSetId"
}

func (e *InvalidDataSetId) ErrorSelector() string {
	return "0xcba16d8c"
}


// InvalidEpochRange represents the InvalidEpochRange error
type InvalidEpochRange struct {
	FromEpoch *big.Int
	ToEpoch *big.Int
}

func (e *InvalidEpochRange) Error() string {
	return fmt.Sprintf("InvalidEpochRange(FromEpoch=%v, ToEpoch=%v)", e.FromEpoch, e.ToEpoch)
}

func (e *InvalidEpochRange) ErrorName() string {
	return "InvalidEpochRange"
}

func (e *InvalidEpochRange) ErrorSelector() string {
	return "0xbb4e0af7"
}


// InvalidRateChangeQueueState represents the InvalidRateChangeQueueState error
type InvalidRateChangeQueueState struct {
	NextRateChangeUntilEpoch *big.Int
	ProcessedEpoch *big.Int
}

func (e *InvalidRateChangeQueueState) Error() string {
	return fmt.Sprintf("InvalidRateChangeQueueState(NextRateChangeUntilEpoch=%v, ProcessedEpoch=%v)", e.NextRateChangeUntilEpoch, e.ProcessedEpoch)
}

func (e *InvalidRateChangeQueueState) ErrorName() string {
	return "InvalidRateChangeQueueState"
}

func (e *InvalidRateChangeQueueState) ErrorSelector() string {
	return "0x2e78e91f"
}


// InvalidSignature represents the InvalidSignature error
type InvalidSignature struct {
	Expected common.Address
	Actual common.Address
}

func (e *InvalidSignature) Error() string {
	return fmt.Sprintf("InvalidSignature(Expected=%s, Actual=%s)", e.Expected.Hex(), e.Actual.Hex())
}

func (e *InvalidSignature) ErrorName() string {
	return "InvalidSignature"
}

func (e *InvalidSignature) ErrorSelector() string {
	return "0x42d750dc"
}


// InvalidSignatureLength represents the InvalidSignatureLength error
type InvalidSignatureLength struct {
	ExpectedLength *big.Int
	ActualLength *big.Int
}

func (e *InvalidSignatureLength) Error() string {
	return fmt.Sprintf("InvalidSignatureLength(ExpectedLength=%v, ActualLength=%v)", e.ExpectedLength, e.ActualLength)
}

func (e *InvalidSignatureLength) ErrorName() string {
	return "InvalidSignatureLength"
}

func (e *InvalidSignatureLength) ErrorSelector() string {
	return "0xd615d706"
}


// InvalidTerminatedRailModification represents the InvalidTerminatedRailModification error
type InvalidTerminatedRailModification struct {
	ActualPeriod *big.Int
	ActualLockupFixed *big.Int
	AttemptedPeriod *big.Int
	AttemptedLockupFixed *big.Int
}

func (e *InvalidTerminatedRailModification) Error() string {
	return fmt.Sprintf("InvalidTerminatedRailModification(ActualPeriod=%v, ActualLockupFixed=%v, AttemptedPeriod=%v, AttemptedLockupFixed=%v)", e.ActualPeriod, e.ActualLockupFixed, e.AttemptedPeriod, e.AttemptedLockupFixed)
}

func (e *InvalidTerminatedRailModification) ErrorName() string {
	return "InvalidTerminatedRailModification"
}

func (e *InvalidTerminatedRailModification) ErrorSelector() string {
	return "0xf72a2118"
}


// InvalidTopUpAmount represents the InvalidTopUpAmount error
type InvalidTopUpAmount struct {
	DataSetId *big.Int
}

func (e *InvalidTopUpAmount) Error() string {
	return fmt.Sprintf("InvalidTopUpAmount(DataSetId=%v)", e.DataSetId)
}

func (e *InvalidTopUpAmount) ErrorName() string {
	return "InvalidTopUpAmount"
}

func (e *InvalidTopUpAmount) ErrorSelector() string {
	return "0x2c5e9e88"
}


// LockupExceedsFundsInvariant represents the LockupExceedsFundsInvariant error
type LockupExceedsFundsInvariant struct {
	Token common.Address
	Account common.Address
	LockupCurrent *big.Int
	FundsCurrent *big.Int
}

func (e *LockupExceedsFundsInvariant) Error() string {
	return fmt.Sprintf("LockupExceedsFundsInvariant(Token=%s, Account=%s, LockupCurrent=%v, FundsCurrent=%v)", e.Token.Hex(), e.Account.Hex(), e.LockupCurrent, e.FundsCurrent)
}

func (e *LockupExceedsFundsInvariant) ErrorName() string {
	return "LockupExceedsFundsInvariant"
}

func (e *LockupExceedsFundsInvariant) ErrorSelector() string {
	return "0x3bea1fb8"
}


// LockupFixedIncreaseNotAllowedDueToInsufficientFunds represents the LockupFixedIncreaseNotAllowedDueToInsufficientFunds error
type LockupFixedIncreaseNotAllowedDueToInsufficientFunds struct {
	Token common.Address
	From common.Address
	ActualLockupFixed *big.Int
	AttemptedLockupFixed *big.Int
}

func (e *LockupFixedIncreaseNotAllowedDueToInsufficientFunds) Error() string {
	return fmt.Sprintf("LockupFixedIncreaseNotAllowedDueToInsufficientFunds(Token=%s, From=%s, ActualLockupFixed=%v, AttemptedLockupFixed=%v)", e.Token.Hex(), e.From.Hex(), e.ActualLockupFixed, e.AttemptedLockupFixed)
}

func (e *LockupFixedIncreaseNotAllowedDueToInsufficientFunds) ErrorName() string {
	return "LockupFixedIncreaseNotAllowedDueToInsufficientFunds"
}

func (e *LockupFixedIncreaseNotAllowedDueToInsufficientFunds) ErrorSelector() string {
	return "0x249e1b0e"
}


// LockupInconsistencyDuringRailFinalization represents the LockupInconsistencyDuringRailFinalization error
type LockupInconsistencyDuringRailFinalization struct {
	RailId *big.Int
	Token common.Address
	From common.Address
	ExpectedLockup *big.Int
	ActualLockup *big.Int
}

func (e *LockupInconsistencyDuringRailFinalization) Error() string {
	return fmt.Sprintf("LockupInconsistencyDuringRailFinalization(RailId=%v, Token=%s, From=%s, ExpectedLockup=%v, ActualLockup=%v)", e.RailId, e.Token.Hex(), e.From.Hex(), e.ExpectedLockup, e.ActualLockup)
}

func (e *LockupInconsistencyDuringRailFinalization) ErrorName() string {
	return "LockupInconsistencyDuringRailFinalization"
}

func (e *LockupInconsistencyDuringRailFinalization) ErrorSelector() string {
	return "0xdb3137ef"
}


// LockupNotSettledRateChangeNotAllowed represents the LockupNotSettledRateChangeNotAllowed error
type LockupNotSettledRateChangeNotAllowed struct {
	RailId *big.Int
	From common.Address
	IsSettled bool
	CurrentRate *big.Int
	AttemptedRate *big.Int
}

func (e *LockupNotSettledRateChangeNotAllowed) Error() string {
	return fmt.Sprintf("LockupNotSettledRateChangeNotAllowed(RailId=%v, From=%s, IsSettled=%v, CurrentRate=%v, AttemptedRate=%v)", e.RailId, e.From.Hex(), e.IsSettled, e.CurrentRate, e.AttemptedRate)
}

func (e *LockupNotSettledRateChangeNotAllowed) ErrorName() string {
	return "LockupNotSettledRateChangeNotAllowed"
}

func (e *LockupNotSettledRateChangeNotAllowed) ErrorSelector() string {
	return "0x020c2e30"
}


// LockupPeriodChangeNotAllowedDueToInsufficientFunds represents the LockupPeriodChangeNotAllowedDueToInsufficientFunds error
type LockupPeriodChangeNotAllowedDueToInsufficientFunds struct {
	Token common.Address
	From common.Address
	ActualLockupPeriod *big.Int
	AttemptedLockupPeriod *big.Int
}

func (e *LockupPeriodChangeNotAllowedDueToInsufficientFunds) Error() string {
	return fmt.Sprintf("LockupPeriodChangeNotAllowedDueToInsufficientFunds(Token=%s, From=%s, ActualLockupPeriod=%v, AttemptedLockupPeriod=%v)", e.Token.Hex(), e.From.Hex(), e.ActualLockupPeriod, e.AttemptedLockupPeriod)
}

func (e *LockupPeriodChangeNotAllowedDueToInsufficientFunds) ErrorName() string {
	return "LockupPeriodChangeNotAllowedDueToInsufficientFunds"
}

func (e *LockupPeriodChangeNotAllowedDueToInsufficientFunds) ErrorSelector() string {
	return "0x9bd4f7f6"
}


// LockupPeriodExceedsOperatorMaximum represents the LockupPeriodExceedsOperatorMaximum error
type LockupPeriodExceedsOperatorMaximum struct {
	Token common.Address
	Operator common.Address
	MaxAllowedPeriod *big.Int
	RequestedPeriod *big.Int
}

func (e *LockupPeriodExceedsOperatorMaximum) Error() string {
	return fmt.Sprintf("LockupPeriodExceedsOperatorMaximum(Token=%s, Operator=%s, MaxAllowedPeriod=%v, RequestedPeriod=%v)", e.Token.Hex(), e.Operator.Hex(), e.MaxAllowedPeriod, e.RequestedPeriod)
}

func (e *LockupPeriodExceedsOperatorMaximum) ErrorName() string {
	return "LockupPeriodExceedsOperatorMaximum"
}

func (e *LockupPeriodExceedsOperatorMaximum) ErrorSelector() string {
	return "0xb8afa055"
}


// LockupRateInconsistent represents the LockupRateInconsistent error
type LockupRateInconsistent struct {
	RailId *big.Int
	From common.Address
	PaymentRate *big.Int
	LockupRate *big.Int
}

func (e *LockupRateInconsistent) Error() string {
	return fmt.Sprintf("LockupRateInconsistent(RailId=%v, From=%s, PaymentRate=%v, LockupRate=%v)", e.RailId, e.From.Hex(), e.PaymentRate, e.LockupRate)
}

func (e *LockupRateInconsistent) ErrorName() string {
	return "LockupRateInconsistent"
}

func (e *LockupRateInconsistent) ErrorSelector() string {
	return "0xa18ff4af"
}


// LockupRateLessThanOldRate represents the LockupRateLessThanOldRate error
type LockupRateLessThanOldRate struct {
	RailId *big.Int
	From common.Address
	LockupRate *big.Int
	OldRate *big.Int
}

func (e *LockupRateLessThanOldRate) Error() string {
	return fmt.Sprintf("LockupRateLessThanOldRate(RailId=%v, From=%s, LockupRate=%v, OldRate=%v)", e.RailId, e.From.Hex(), e.LockupRate, e.OldRate)
}

func (e *LockupRateLessThanOldRate) ErrorName() string {
	return "LockupRateLessThanOldRate"
}

func (e *LockupRateLessThanOldRate) ErrorSelector() string {
	return "0xd909f4e2"
}


// MaxProvingPeriodZero represents the MaxProvingPeriodZero error
type MaxProvingPeriodZero struct {
}

func (e *MaxProvingPeriodZero) Error() string {
	return "MaxProvingPeriodZero()"
}

func (e *MaxProvingPeriodZero) ErrorName() string {
	return "MaxProvingPeriodZero"
}

func (e *MaxProvingPeriodZero) ErrorSelector() string {
	return "0xab9ff1e7"
}


// MetadataArrayCountMismatch represents the MetadataArrayCountMismatch error
type MetadataArrayCountMismatch struct {
	MetadataArrayCount *big.Int
	PieceCount *big.Int
}

func (e *MetadataArrayCountMismatch) Error() string {
	return fmt.Sprintf("MetadataArrayCountMismatch(MetadataArrayCount=%v, PieceCount=%v)", e.MetadataArrayCount, e.PieceCount)
}

func (e *MetadataArrayCountMismatch) ErrorName() string {
	return "MetadataArrayCountMismatch"
}

func (e *MetadataArrayCountMismatch) ErrorSelector() string {
	return "0x9b7cf882"
}


// MetadataKeyAndValueLengthMismatch represents the MetadataKeyAndValueLengthMismatch error
type MetadataKeyAndValueLengthMismatch struct {
	KeysLength *big.Int
	ValuesLength *big.Int
}

func (e *MetadataKeyAndValueLengthMismatch) Error() string {
	return fmt.Sprintf("MetadataKeyAndValueLengthMismatch(KeysLength=%v, ValuesLength=%v)", e.KeysLength, e.ValuesLength)
}

func (e *MetadataKeyAndValueLengthMismatch) ErrorName() string {
	return "MetadataKeyAndValueLengthMismatch"
}

func (e *MetadataKeyAndValueLengthMismatch) ErrorSelector() string {
	return "0xa3741480"
}


// MetadataKeyExceedsMaxLength represents the MetadataKeyExceedsMaxLength error
type MetadataKeyExceedsMaxLength struct {
	Index *big.Int
	MaxAllowed *big.Int
	Length *big.Int
}

func (e *MetadataKeyExceedsMaxLength) Error() string {
	return fmt.Sprintf("MetadataKeyExceedsMaxLength(Index=%v, MaxAllowed=%v, Length=%v)", e.Index, e.MaxAllowed, e.Length)
}

func (e *MetadataKeyExceedsMaxLength) ErrorName() string {
	return "MetadataKeyExceedsMaxLength"
}

func (e *MetadataKeyExceedsMaxLength) ErrorSelector() string {
	return "0xd307879f"
}


// MetadataValueExceedsMaxLength represents the MetadataValueExceedsMaxLength error
type MetadataValueExceedsMaxLength struct {
	Index *big.Int
	MaxAllowed *big.Int
	Length *big.Int
}

func (e *MetadataValueExceedsMaxLength) Error() string {
	return fmt.Sprintf("MetadataValueExceedsMaxLength(Index=%v, MaxAllowed=%v, Length=%v)", e.Index, e.MaxAllowed, e.Length)
}

func (e *MetadataValueExceedsMaxLength) ErrorName() string {
	return "MetadataValueExceedsMaxLength"
}

func (e *MetadataValueExceedsMaxLength) ErrorSelector() string {
	return "0x9a16e82a"
}


// MissingServiceFeeRecipient represents the MissingServiceFeeRecipient error
type MissingServiceFeeRecipient struct {
}

func (e *MissingServiceFeeRecipient) Error() string {
	return "MissingServiceFeeRecipient()"
}

func (e *MissingServiceFeeRecipient) ErrorName() string {
	return "MissingServiceFeeRecipient"
}

func (e *MissingServiceFeeRecipient) ErrorSelector() string {
	return "0xe237a731"
}


// MustSendExactNativeAmount represents the MustSendExactNativeAmount error
type MustSendExactNativeAmount struct {
	Required *big.Int
	Sent *big.Int
}

func (e *MustSendExactNativeAmount) Error() string {
	return fmt.Sprintf("MustSendExactNativeAmount(Required=%v, Sent=%v)", e.Required, e.Sent)
}

func (e *MustSendExactNativeAmount) ErrorName() string {
	return "MustSendExactNativeAmount"
}

func (e *MustSendExactNativeAmount) ErrorSelector() string {
	return "0x753a1281"
}


// NativeTokenNotAccepted represents the NativeTokenNotAccepted error
type NativeTokenNotAccepted struct {
	Sent *big.Int
}

func (e *NativeTokenNotAccepted) Error() string {
	return fmt.Sprintf("NativeTokenNotAccepted(Sent=%v)", e.Sent)
}

func (e *NativeTokenNotAccepted) ErrorName() string {
	return "NativeTokenNotAccepted"
}

func (e *NativeTokenNotAccepted) ErrorSelector() string {
	return "0x2546923b"
}


// NativeTokenNotSupported represents the NativeTokenNotSupported error
type NativeTokenNotSupported struct {
}

func (e *NativeTokenNotSupported) Error() string {
	return "NativeTokenNotSupported()"
}

func (e *NativeTokenNotSupported) ErrorName() string {
	return "NativeTokenNotSupported"
}

func (e *NativeTokenNotSupported) ErrorSelector() string {
	return "0xb10b947e"
}


// NativeTransferFailed represents the NativeTransferFailed error
type NativeTransferFailed struct {
	To common.Address
	Amount *big.Int
}

func (e *NativeTransferFailed) Error() string {
	return fmt.Sprintf("NativeTransferFailed(To=%s, Amount=%v)", e.To.Hex(), e.Amount)
}

func (e *NativeTransferFailed) ErrorName() string {
	return "NativeTransferFailed"
}

func (e *NativeTransferFailed) ErrorSelector() string {
	return "0xa5b05eec"
}


// NextProvingPeriodAlreadyCalled represents the NextProvingPeriodAlreadyCalled error
type NextProvingPeriodAlreadyCalled struct {
	DataSetId *big.Int
	PeriodDeadline *big.Int
	NowBlock *big.Int
}

func (e *NextProvingPeriodAlreadyCalled) Error() string {
	return fmt.Sprintf("NextProvingPeriodAlreadyCalled(DataSetId=%v, PeriodDeadline=%v, NowBlock=%v)", e.DataSetId, e.PeriodDeadline, e.NowBlock)
}

func (e *NextProvingPeriodAlreadyCalled) ErrorName() string {
	return "NextProvingPeriodAlreadyCalled"
}

func (e *NextProvingPeriodAlreadyCalled) ErrorSelector() string {
	return "0x033bf3f1"
}


// NoPDPPaymentRail represents the NoPDPPaymentRail error
type NoPDPPaymentRail struct {
	DataSetId *big.Int
}

func (e *NoPDPPaymentRail) Error() string {
	return fmt.Sprintf("NoPDPPaymentRail(DataSetId=%v)", e.DataSetId)
}

func (e *NoPDPPaymentRail) ErrorName() string {
	return "NoPDPPaymentRail"
}

func (e *NoPDPPaymentRail) ErrorSelector() string {
	return "0x5d3bfcbb"
}


// NoProgressInSettlement represents the NoProgressInSettlement error
type NoProgressInSettlement struct {
	RailId *big.Int
	ExpectedSettledUpTo *big.Int
	ActualSettledUpTo *big.Int
}

func (e *NoProgressInSettlement) Error() string {
	return fmt.Sprintf("NoProgressInSettlement(RailId=%v, ExpectedSettledUpTo=%v, ActualSettledUpTo=%v)", e.RailId, e.ExpectedSettledUpTo, e.ActualSettledUpTo)
}

func (e *NoProgressInSettlement) ErrorName() string {
	return "NoProgressInSettlement"
}

func (e *NoProgressInSettlement) ErrorSelector() string {
	return "0xae296731"
}


// NotAuthorizedToTerminateRail represents the NotAuthorizedToTerminateRail error
type NotAuthorizedToTerminateRail struct {
	RailId *big.Int
	AllowedClient common.Address
	AllowedOperator common.Address
	Caller common.Address
}

func (e *NotAuthorizedToTerminateRail) Error() string {
	return fmt.Sprintf("NotAuthorizedToTerminateRail(RailId=%v, AllowedClient=%s, AllowedOperator=%s, Caller=%s)", e.RailId, e.AllowedClient.Hex(), e.AllowedOperator.Hex(), e.Caller.Hex())
}

func (e *NotAuthorizedToTerminateRail) ErrorName() string {
	return "NotAuthorizedToTerminateRail"
}

func (e *NotAuthorizedToTerminateRail) ErrorSelector() string {
	return "0x766e1d31"
}


// OldServiceProviderMismatch represents the OldServiceProviderMismatch error
type OldServiceProviderMismatch struct {
	DataSetId *big.Int
	Expected common.Address
	Actual common.Address
}

func (e *OldServiceProviderMismatch) Error() string {
	return fmt.Sprintf("OldServiceProviderMismatch(DataSetId=%v, Expected=%s, Actual=%s)", e.DataSetId, e.Expected.Hex(), e.Actual.Hex())
}

func (e *OldServiceProviderMismatch) ErrorName() string {
	return "OldServiceProviderMismatch"
}

func (e *OldServiceProviderMismatch) ErrorSelector() string {
	return "0x23964715"
}


// OneTimePaymentExceedsLockup represents the OneTimePaymentExceedsLockup error
type OneTimePaymentExceedsLockup struct {
	RailId *big.Int
	Available *big.Int
	Required *big.Int
}

func (e *OneTimePaymentExceedsLockup) Error() string {
	return fmt.Sprintf("OneTimePaymentExceedsLockup(RailId=%v, Available=%v, Required=%v)", e.RailId, e.Available, e.Required)
}

func (e *OneTimePaymentExceedsLockup) ErrorName() string {
	return "OneTimePaymentExceedsLockup"
}

func (e *OneTimePaymentExceedsLockup) ErrorSelector() string {
	return "0xc58d5cbc"
}


// OnlyFilBeamControllerAllowed represents the OnlyFilBeamControllerAllowed error
type OnlyFilBeamControllerAllowed struct {
	Expected common.Address
	Actual common.Address
}

func (e *OnlyFilBeamControllerAllowed) Error() string {
	return fmt.Sprintf("OnlyFilBeamControllerAllowed(Expected=%s, Actual=%s)", e.Expected.Hex(), e.Actual.Hex())
}

func (e *OnlyFilBeamControllerAllowed) ErrorName() string {
	return "OnlyFilBeamControllerAllowed"
}

func (e *OnlyFilBeamControllerAllowed) ErrorSelector() string {
	return "0xc2aebdff"
}


// OnlyPDPVerifierAllowed represents the OnlyPDPVerifierAllowed error
type OnlyPDPVerifierAllowed struct {
	Expected common.Address
	Actual common.Address
}

func (e *OnlyPDPVerifierAllowed) Error() string {
	return fmt.Sprintf("OnlyPDPVerifierAllowed(Expected=%s, Actual=%s)", e.Expected.Hex(), e.Actual.Hex())
}

func (e *OnlyPDPVerifierAllowed) ErrorName() string {
	return "OnlyPDPVerifierAllowed"
}

func (e *OnlyPDPVerifierAllowed) ErrorSelector() string {
	return "0x6459cb42"
}


// OnlyRailClientAllowed represents the OnlyRailClientAllowed error
type OnlyRailClientAllowed struct {
	Expected common.Address
	Caller common.Address
}

func (e *OnlyRailClientAllowed) Error() string {
	return fmt.Sprintf("OnlyRailClientAllowed(Expected=%s, Caller=%s)", e.Expected.Hex(), e.Caller.Hex())
}

func (e *OnlyRailClientAllowed) ErrorName() string {
	return "OnlyRailClientAllowed"
}

func (e *OnlyRailClientAllowed) ErrorSelector() string {
	return "0x2c0d8add"
}


// OnlyRailOperatorAllowed represents the OnlyRailOperatorAllowed error
type OnlyRailOperatorAllowed struct {
	Expected common.Address
	Caller common.Address
}

func (e *OnlyRailOperatorAllowed) Error() string {
	return fmt.Sprintf("OnlyRailOperatorAllowed(Expected=%s, Caller=%s)", e.Expected.Hex(), e.Caller.Hex())
}

func (e *OnlyRailOperatorAllowed) ErrorName() string {
	return "OnlyRailOperatorAllowed"
}

func (e *OnlyRailOperatorAllowed) ErrorSelector() string {
	return "0xf4d2d70a"
}


// OnlyRailParticipantAllowed represents the OnlyRailParticipantAllowed error
type OnlyRailParticipantAllowed struct {
	ExpectedFrom common.Address
	ExpectedOperator common.Address
	ExpectedTo common.Address
	Caller common.Address
}

func (e *OnlyRailParticipantAllowed) Error() string {
	return fmt.Sprintf("OnlyRailParticipantAllowed(ExpectedFrom=%s, ExpectedOperator=%s, ExpectedTo=%s, Caller=%s)", e.ExpectedFrom.Hex(), e.ExpectedOperator.Hex(), e.ExpectedTo.Hex(), e.Caller.Hex())
}

func (e *OnlyRailParticipantAllowed) ErrorName() string {
	return "OnlyRailParticipantAllowed"
}

func (e *OnlyRailParticipantAllowed) ErrorSelector() string {
	return "0x1dcd4c5f"
}


// OnlySelf represents the OnlySelf error
type OnlySelf struct {
	Expected common.Address
	Actual common.Address
}

func (e *OnlySelf) Error() string {
	return fmt.Sprintf("OnlySelf(Expected=%s, Actual=%s)", e.Expected.Hex(), e.Actual.Hex())
}

func (e *OnlySelf) ErrorName() string {
	return "OnlySelf"
}

func (e *OnlySelf) ErrorSelector() string {
	return "0x3ce8f537"
}


// OperatorLockupAllowanceExceeded represents the OperatorLockupAllowanceExceeded error
type OperatorLockupAllowanceExceeded struct {
	Allowed *big.Int
	AttemptedUsage *big.Int
}

func (e *OperatorLockupAllowanceExceeded) Error() string {
	return fmt.Sprintf("OperatorLockupAllowanceExceeded(Allowed=%v, AttemptedUsage=%v)", e.Allowed, e.AttemptedUsage)
}

func (e *OperatorLockupAllowanceExceeded) ErrorName() string {
	return "OperatorLockupAllowanceExceeded"
}

func (e *OperatorLockupAllowanceExceeded) ErrorSelector() string {
	return "0x8dcd0606"
}


// OperatorNotApproved represents the OperatorNotApproved error
type OperatorNotApproved struct {
	From common.Address
	Operator common.Address
}

func (e *OperatorNotApproved) Error() string {
	return fmt.Sprintf("OperatorNotApproved(From=%s, Operator=%s)", e.From.Hex(), e.Operator.Hex())
}

func (e *OperatorNotApproved) ErrorName() string {
	return "OperatorNotApproved"
}

func (e *OperatorNotApproved) ErrorSelector() string {
	return "0xeef23db6"
}


// OperatorRateAllowanceExceeded represents the OperatorRateAllowanceExceeded error
type OperatorRateAllowanceExceeded struct {
	Allowed *big.Int
	AttemptedUsage *big.Int
}

func (e *OperatorRateAllowanceExceeded) Error() string {
	return fmt.Sprintf("OperatorRateAllowanceExceeded(Allowed=%v, AttemptedUsage=%v)", e.Allowed, e.AttemptedUsage)
}

func (e *OperatorRateAllowanceExceeded) ErrorName() string {
	return "OperatorRateAllowanceExceeded"
}

func (e *OperatorRateAllowanceExceeded) ErrorSelector() string {
	return "0x6c577bf9"
}


// PaymentRailsNotFinalized represents the PaymentRailsNotFinalized error
type PaymentRailsNotFinalized struct {
	DataSetId *big.Int
	PdpEndEpoch *big.Int
}

func (e *PaymentRailsNotFinalized) Error() string {
	return fmt.Sprintf("PaymentRailsNotFinalized(DataSetId=%v, PdpEndEpoch=%v)", e.DataSetId, e.PdpEndEpoch)
}

func (e *PaymentRailsNotFinalized) ErrorName() string {
	return "PaymentRailsNotFinalized"
}

func (e *PaymentRailsNotFinalized) ErrorSelector() string {
	return "0x23fe2e89"
}


// ProofAlreadySubmitted represents the ProofAlreadySubmitted error
type ProofAlreadySubmitted struct {
	DataSetId *big.Int
}

func (e *ProofAlreadySubmitted) Error() string {
	return fmt.Sprintf("ProofAlreadySubmitted(DataSetId=%v)", e.DataSetId)
}

func (e *ProofAlreadySubmitted) ErrorName() string {
	return "ProofAlreadySubmitted"
}

func (e *ProofAlreadySubmitted) ErrorSelector() string {
	return "0x425335c3"
}


// ProviderAlreadyApproved represents the ProviderAlreadyApproved error
type ProviderAlreadyApproved struct {
	ProviderId *big.Int
}

func (e *ProviderAlreadyApproved) Error() string {
	return fmt.Sprintf("ProviderAlreadyApproved(ProviderId=%v)", e.ProviderId)
}

func (e *ProviderAlreadyApproved) ErrorName() string {
	return "ProviderAlreadyApproved"
}

func (e *ProviderAlreadyApproved) ErrorSelector() string {
	return "0x431cf638"
}


// ProviderNotApproved represents the ProviderNotApproved error
type ProviderNotApproved struct {
	Provider common.Address
	ProviderId *big.Int
}

func (e *ProviderNotApproved) Error() string {
	return fmt.Sprintf("ProviderNotApproved(Provider=%s, ProviderId=%v)", e.Provider.Hex(), e.ProviderId)
}

func (e *ProviderNotApproved) ErrorName() string {
	return "ProviderNotApproved"
}

func (e *ProviderNotApproved) ErrorSelector() string {
	return "0x0d141d0c"
}


// ProviderNotInApprovedList represents the ProviderNotInApprovedList error
type ProviderNotInApprovedList struct {
	ProviderId *big.Int
}

func (e *ProviderNotInApprovedList) Error() string {
	return fmt.Sprintf("ProviderNotInApprovedList(ProviderId=%v)", e.ProviderId)
}

func (e *ProviderNotInApprovedList) ErrorName() string {
	return "ProviderNotInApprovedList"
}

func (e *ProviderNotInApprovedList) ErrorSelector() string {
	return "0x52d6fdb5"
}


// ProviderNotRegistered represents the ProviderNotRegistered error
type ProviderNotRegistered struct {
	Provider common.Address
}

func (e *ProviderNotRegistered) Error() string {
	return fmt.Sprintf("ProviderNotRegistered(Provider=%s)", e.Provider.Hex())
}

func (e *ProviderNotRegistered) ErrorName() string {
	return "ProviderNotRegistered"
}

func (e *ProviderNotRegistered) ErrorSelector() string {
	return "0x232cb27a"
}


// ProvingNotStarted represents the ProvingNotStarted error
type ProvingNotStarted struct {
	DataSetId *big.Int
}

func (e *ProvingNotStarted) Error() string {
	return fmt.Sprintf("ProvingNotStarted(DataSetId=%v)", e.DataSetId)
}

func (e *ProvingNotStarted) ErrorName() string {
	return "ProvingNotStarted"
}

func (e *ProvingNotStarted) ErrorSelector() string {
	return "0x28bb1a79"
}


// ProvingPeriodNotInitialized represents the ProvingPeriodNotInitialized error
type ProvingPeriodNotInitialized struct {
	DataSetId *big.Int
}

func (e *ProvingPeriodNotInitialized) Error() string {
	return fmt.Sprintf("ProvingPeriodNotInitialized(DataSetId=%v)", e.DataSetId)
}

func (e *ProvingPeriodNotInitialized) ErrorName() string {
	return "ProvingPeriodNotInitialized"
}

func (e *ProvingPeriodNotInitialized) ErrorSelector() string {
	return "0x999010d5"
}


// ProvingPeriodPassed represents the ProvingPeriodPassed error
type ProvingPeriodPassed struct {
	DataSetId *big.Int
	Deadline *big.Int
	NowBlock *big.Int
}

func (e *ProvingPeriodPassed) Error() string {
	return fmt.Sprintf("ProvingPeriodPassed(DataSetId=%v, Deadline=%v, NowBlock=%v)", e.DataSetId, e.Deadline, e.NowBlock)
}

func (e *ProvingPeriodPassed) ErrorName() string {
	return "ProvingPeriodPassed"
}

func (e *ProvingPeriodPassed) ErrorSelector() string {
	return "0x9514f828"
}


// RailAlreadyTerminated represents the RailAlreadyTerminated error
type RailAlreadyTerminated struct {
	RailId *big.Int
}

func (e *RailAlreadyTerminated) Error() string {
	return fmt.Sprintf("RailAlreadyTerminated(RailId=%v)", e.RailId)
}

func (e *RailAlreadyTerminated) ErrorName() string {
	return "RailAlreadyTerminated"
}

func (e *RailAlreadyTerminated) ErrorSelector() string {
	return "0x4947b7af"
}


// RailInactiveOrSettled represents the RailInactiveOrSettled error
type RailInactiveOrSettled struct {
	RailId *big.Int
}

func (e *RailInactiveOrSettled) Error() string {
	return fmt.Sprintf("RailInactiveOrSettled(RailId=%v)", e.RailId)
}

func (e *RailInactiveOrSettled) ErrorName() string {
	return "RailInactiveOrSettled"
}

func (e *RailInactiveOrSettled) ErrorSelector() string {
	return "0xd87df04d"
}


// RailNotAssociated represents the RailNotAssociated error
type RailNotAssociated struct {
	RailId *big.Int
}

func (e *RailNotAssociated) Error() string {
	return fmt.Sprintf("RailNotAssociated(RailId=%v)", e.RailId)
}

func (e *RailNotAssociated) ErrorName() string {
	return "RailNotAssociated"
}

func (e *RailNotAssociated) ErrorSelector() string {
	return "0x797fec96"
}


// RailNotTerminated represents the RailNotTerminated error
type RailNotTerminated struct {
	RailId *big.Int
}

func (e *RailNotTerminated) Error() string {
	return fmt.Sprintf("RailNotTerminated(RailId=%v)", e.RailId)
}

func (e *RailNotTerminated) ErrorName() string {
	return "RailNotTerminated"
}

func (e *RailNotTerminated) ErrorSelector() string {
	return "0x5a70954b"
}


// RateChangeNotAllowedOnTerminatedRail represents the RateChangeNotAllowedOnTerminatedRail error
type RateChangeNotAllowedOnTerminatedRail struct {
	RailId *big.Int
}

func (e *RateChangeNotAllowedOnTerminatedRail) Error() string {
	return fmt.Sprintf("RateChangeNotAllowedOnTerminatedRail(RailId=%v)", e.RailId)
}

func (e *RateChangeNotAllowedOnTerminatedRail) ErrorName() string {
	return "RateChangeNotAllowedOnTerminatedRail"
}

func (e *RateChangeNotAllowedOnTerminatedRail) ErrorSelector() string {
	return "0x9eb55fd7"
}


// RateChangeQueueNotEmpty represents the RateChangeQueueNotEmpty error
type RateChangeQueueNotEmpty struct {
	NextUntilEpoch *big.Int
}

func (e *RateChangeQueueNotEmpty) Error() string {
	return fmt.Sprintf("RateChangeQueueNotEmpty(NextUntilEpoch=%v)", e.NextUntilEpoch)
}

func (e *RateChangeQueueNotEmpty) ErrorName() string {
	return "RateChangeQueueNotEmpty"
}

func (e *RateChangeQueueNotEmpty) ErrorSelector() string {
	return "0xe60266a8"
}


// ServiceContractMustTerminateRail represents the ServiceContractMustTerminateRail error
type ServiceContractMustTerminateRail struct {
}

func (e *ServiceContractMustTerminateRail) Error() string {
	return "ServiceContractMustTerminateRail()"
}

func (e *ServiceContractMustTerminateRail) ErrorName() string {
	return "ServiceContractMustTerminateRail"
}

func (e *ServiceContractMustTerminateRail) ErrorSelector() string {
	return "0x1a1e3e28"
}


// SignerMustBeMsgSender represents the SignerMustBeMsgSender error
type SignerMustBeMsgSender struct {
	Expected common.Address
	Actual common.Address
}

func (e *SignerMustBeMsgSender) Error() string {
	return fmt.Sprintf("SignerMustBeMsgSender(Expected=%s, Actual=%s)", e.Expected.Hex(), e.Actual.Hex())
}

func (e *SignerMustBeMsgSender) ErrorName() string {
	return "SignerMustBeMsgSender"
}

func (e *SignerMustBeMsgSender) ErrorSelector() string {
	return "0x5269c0dd"
}


// TooManyMetadataKeys represents the TooManyMetadataKeys error
type TooManyMetadataKeys struct {
	MaxAllowed *big.Int
	KeysLength *big.Int
}

func (e *TooManyMetadataKeys) Error() string {
	return fmt.Sprintf("TooManyMetadataKeys(MaxAllowed=%v, KeysLength=%v)", e.MaxAllowed, e.KeysLength)
}

func (e *TooManyMetadataKeys) ErrorName() string {
	return "TooManyMetadataKeys"
}

func (e *TooManyMetadataKeys) ErrorSelector() string {
	return "0xd516067a"
}


// UnsupportedSignatureV represents the UnsupportedSignatureV error
type UnsupportedSignatureV struct {
	V uint8
}

func (e *UnsupportedSignatureV) Error() string {
	return fmt.Sprintf("UnsupportedSignatureV(V=%v)", e.V)
}

func (e *UnsupportedSignatureV) ErrorName() string {
	return "UnsupportedSignatureV"
}

func (e *UnsupportedSignatureV) ErrorSelector() string {
	return "0x425c1fae"
}


// ValidatorModifiedAmountExceedsMaximum represents the ValidatorModifiedAmountExceedsMaximum error
type ValidatorModifiedAmountExceedsMaximum struct {
	RailId *big.Int
	MaxAllowed *big.Int
	Attempted *big.Int
}

func (e *ValidatorModifiedAmountExceedsMaximum) Error() string {
	return fmt.Sprintf("ValidatorModifiedAmountExceedsMaximum(RailId=%v, MaxAllowed=%v, Attempted=%v)", e.RailId, e.MaxAllowed, e.Attempted)
}

func (e *ValidatorModifiedAmountExceedsMaximum) ErrorName() string {
	return "ValidatorModifiedAmountExceedsMaximum"
}

func (e *ValidatorModifiedAmountExceedsMaximum) ErrorSelector() string {
	return "0x1fccb6c4"
}


// ValidatorSettledBeforeSegmentStart represents the ValidatorSettledBeforeSegmentStart error
type ValidatorSettledBeforeSegmentStart struct {
	RailId *big.Int
	AllowedStart *big.Int
	AttemptedStart *big.Int
}

func (e *ValidatorSettledBeforeSegmentStart) Error() string {
	return fmt.Sprintf("ValidatorSettledBeforeSegmentStart(RailId=%v, AllowedStart=%v, AttemptedStart=%v)", e.RailId, e.AllowedStart, e.AttemptedStart)
}

func (e *ValidatorSettledBeforeSegmentStart) ErrorName() string {
	return "ValidatorSettledBeforeSegmentStart"
}

func (e *ValidatorSettledBeforeSegmentStart) ErrorSelector() string {
	return "0x0696a4a4"
}


// ValidatorSettledBeyondSegmentEnd represents the ValidatorSettledBeyondSegmentEnd error
type ValidatorSettledBeyondSegmentEnd struct {
	RailId *big.Int
	AllowedEnd *big.Int
	AttemptedEnd *big.Int
}

func (e *ValidatorSettledBeyondSegmentEnd) Error() string {
	return fmt.Sprintf("ValidatorSettledBeyondSegmentEnd(RailId=%v, AllowedEnd=%v, AttemptedEnd=%v)", e.RailId, e.AllowedEnd, e.AttemptedEnd)
}

func (e *ValidatorSettledBeyondSegmentEnd) ErrorName() string {
	return "ValidatorSettledBeyondSegmentEnd"
}

func (e *ValidatorSettledBeyondSegmentEnd) ErrorSelector() string {
	return "0xcaa0872a"
}


// WithdrawAmountExceedsAccumulatedFees represents the WithdrawAmountExceedsAccumulatedFees error
type WithdrawAmountExceedsAccumulatedFees struct {
	Token common.Address
	Available *big.Int
	Requested *big.Int
}

func (e *WithdrawAmountExceedsAccumulatedFees) Error() string {
	return fmt.Sprintf("WithdrawAmountExceedsAccumulatedFees(Token=%s, Available=%v, Requested=%v)", e.Token.Hex(), e.Available, e.Requested)
}

func (e *WithdrawAmountExceedsAccumulatedFees) ErrorName() string {
	return "WithdrawAmountExceedsAccumulatedFees"
}

func (e *WithdrawAmountExceedsAccumulatedFees) ErrorSelector() string {
	return "0xf7a5ad6d"
}


// ZeroAddress represents the ZeroAddress error
type ZeroAddress struct {
	Field uint8
}

func (e *ZeroAddress) Error() string {
	return fmt.Sprintf("ZeroAddress(Field=%v)", e.Field)
}

func (e *ZeroAddress) ErrorName() string {
	return "ZeroAddress"
}

func (e *ZeroAddress) ErrorSelector() string {
	return "0x620b9903"
}


// ZeroAddressNotAllowed represents the ZeroAddressNotAllowed error
type ZeroAddressNotAllowed struct {
	VarName string
}

func (e *ZeroAddressNotAllowed) Error() string {
	return fmt.Sprintf("ZeroAddressNotAllowed(VarName=%s)", e.VarName)
}

func (e *ZeroAddressNotAllowed) ErrorName() string {
	return "ZeroAddressNotAllowed"
}

func (e *ZeroAddressNotAllowed) ErrorSelector() string {
	return "0x44034241"
}


