// Code generated by error-binding-generator. DO NOT EDIT.

package evmerrors


// IsCDNPaymentAlreadyTerminated checks if the error is a CDNPaymentAlreadyTerminated error
func IsCDNPaymentAlreadyTerminated(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*CDNPaymentAlreadyTerminated)
	return ok
}


// IsCacheMissPaymentAlreadyTerminated checks if the error is a CacheMissPaymentAlreadyTerminated error
func IsCacheMissPaymentAlreadyTerminated(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*CacheMissPaymentAlreadyTerminated)
	return ok
}


// IsCallerNotPayer checks if the error is a CallerNotPayer error
func IsCallerNotPayer(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*CallerNotPayer)
	return ok
}


// IsCallerNotPayerOrPayee checks if the error is a CallerNotPayerOrPayee error
func IsCallerNotPayerOrPayee(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*CallerNotPayerOrPayee)
	return ok
}


// IsCallerNotPayments checks if the error is a CallerNotPayments error
func IsCallerNotPayments(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*CallerNotPayments)
	return ok
}


// IsCannotModifyTerminatedRailBeyondEndEpoch checks if the error is a CannotModifyTerminatedRailBeyondEndEpoch error
func IsCannotModifyTerminatedRailBeyondEndEpoch(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*CannotModifyTerminatedRailBeyondEndEpoch)
	return ok
}


// IsCannotSettleFutureEpochs checks if the error is a CannotSettleFutureEpochs error
func IsCannotSettleFutureEpochs(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*CannotSettleFutureEpochs)
	return ok
}


// IsCannotSettleTerminatedRailBeforeMaxEpoch checks if the error is a CannotSettleTerminatedRailBeforeMaxEpoch error
func IsCannotSettleTerminatedRailBeforeMaxEpoch(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*CannotSettleTerminatedRailBeforeMaxEpoch)
	return ok
}


// IsChallengeWindowTooEarly checks if the error is a ChallengeWindowTooEarly error
func IsChallengeWindowTooEarly(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*ChallengeWindowTooEarly)
	return ok
}


// IsCommissionExceedsMaximum checks if the error is a CommissionExceedsMaximum error
func IsCommissionExceedsMaximum(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*CommissionExceedsMaximum)
	return ok
}


// IsCommissionRateTooHigh checks if the error is a CommissionRateTooHigh error
func IsCommissionRateTooHigh(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*CommissionRateTooHigh)
	return ok
}


// IsCurrentLockupLessThanOldLockup checks if the error is a CurrentLockupLessThanOldLockup error
func IsCurrentLockupLessThanOldLockup(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*CurrentLockupLessThanOldLockup)
	return ok
}


// IsDataSetNotFoundForRail checks if the error is a DataSetNotFoundForRail error
func IsDataSetNotFoundForRail(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*DataSetNotFoundForRail)
	return ok
}


// IsDataSetNotRegistered checks if the error is a DataSetNotRegistered error
func IsDataSetNotRegistered(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*DataSetNotRegistered)
	return ok
}


// IsDataSetPaymentAlreadyTerminated checks if the error is a DataSetPaymentAlreadyTerminated error
func IsDataSetPaymentAlreadyTerminated(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*DataSetPaymentAlreadyTerminated)
	return ok
}


// IsDataSetPaymentBeyondEndEpoch checks if the error is a DataSetPaymentBeyondEndEpoch error
func IsDataSetPaymentBeyondEndEpoch(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*DataSetPaymentBeyondEndEpoch)
	return ok
}


// IsDivisionByZero checks if the error is a DivisionByZero error
func IsDivisionByZero(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*DivisionByZero)
	return ok
}


// IsDuplicateMetadataKey checks if the error is a DuplicateMetadataKey error
func IsDuplicateMetadataKey(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*DuplicateMetadataKey)
	return ok
}


// IsExtraDataRequired checks if the error is a ExtraDataRequired error
func IsExtraDataRequired(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*ExtraDataRequired)
	return ok
}


// IsFeeWithdrawalNativeTransferFailed checks if the error is a FeeWithdrawalNativeTransferFailed error
func IsFeeWithdrawalNativeTransferFailed(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*FeeWithdrawalNativeTransferFailed)
	return ok
}


// IsFilBeamServiceNotConfigured checks if the error is a FilBeamServiceNotConfigured error
func IsFilBeamServiceNotConfigured(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*FilBeamServiceNotConfigured)
	return ok
}


// IsInsufficientCurrentLockup checks if the error is a InsufficientCurrentLockup error
func IsInsufficientCurrentLockup(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*InsufficientCurrentLockup)
	return ok
}


// IsInsufficientFundsForOneTimePayment checks if the error is a InsufficientFundsForOneTimePayment error
func IsInsufficientFundsForOneTimePayment(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*InsufficientFundsForOneTimePayment)
	return ok
}


// IsInsufficientFundsForSettlement checks if the error is a InsufficientFundsForSettlement error
func IsInsufficientFundsForSettlement(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*InsufficientFundsForSettlement)
	return ok
}


// IsInsufficientLockupForSettlement checks if the error is a InsufficientLockupForSettlement error
func IsInsufficientLockupForSettlement(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*InsufficientLockupForSettlement)
	return ok
}


// IsInsufficientNativeTokenForBurn checks if the error is a InsufficientNativeTokenForBurn error
func IsInsufficientNativeTokenForBurn(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*InsufficientNativeTokenForBurn)
	return ok
}


// IsInsufficientUnlockedFunds checks if the error is a InsufficientUnlockedFunds error
func IsInsufficientUnlockedFunds(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*InsufficientUnlockedFunds)
	return ok
}


// IsInvalidChallengeCount checks if the error is a InvalidChallengeCount error
func IsInvalidChallengeCount(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*InvalidChallengeCount)
	return ok
}


// IsInvalidChallengeEpoch checks if the error is a InvalidChallengeEpoch error
func IsInvalidChallengeEpoch(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*InvalidChallengeEpoch)
	return ok
}


// IsInvalidChallengeWindowSize checks if the error is a InvalidChallengeWindowSize error
func IsInvalidChallengeWindowSize(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*InvalidChallengeWindowSize)
	return ok
}


// IsInvalidDataSetId checks if the error is a InvalidDataSetId error
func IsInvalidDataSetId(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*InvalidDataSetId)
	return ok
}


// IsInvalidEpochRange checks if the error is a InvalidEpochRange error
func IsInvalidEpochRange(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*InvalidEpochRange)
	return ok
}


// IsInvalidRateChangeQueueState checks if the error is a InvalidRateChangeQueueState error
func IsInvalidRateChangeQueueState(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*InvalidRateChangeQueueState)
	return ok
}


// IsInvalidSignature checks if the error is a InvalidSignature error
func IsInvalidSignature(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*InvalidSignature)
	return ok
}


// IsInvalidSignatureLength checks if the error is a InvalidSignatureLength error
func IsInvalidSignatureLength(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*InvalidSignatureLength)
	return ok
}


// IsInvalidTerminatedRailModification checks if the error is a InvalidTerminatedRailModification error
func IsInvalidTerminatedRailModification(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*InvalidTerminatedRailModification)
	return ok
}


// IsInvalidTopUpAmount checks if the error is a InvalidTopUpAmount error
func IsInvalidTopUpAmount(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*InvalidTopUpAmount)
	return ok
}


// IsLockupExceedsFundsInvariant checks if the error is a LockupExceedsFundsInvariant error
func IsLockupExceedsFundsInvariant(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*LockupExceedsFundsInvariant)
	return ok
}


// IsLockupFixedIncreaseNotAllowedDueToInsufficientFunds checks if the error is a LockupFixedIncreaseNotAllowedDueToInsufficientFunds error
func IsLockupFixedIncreaseNotAllowedDueToInsufficientFunds(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*LockupFixedIncreaseNotAllowedDueToInsufficientFunds)
	return ok
}


// IsLockupInconsistencyDuringRailFinalization checks if the error is a LockupInconsistencyDuringRailFinalization error
func IsLockupInconsistencyDuringRailFinalization(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*LockupInconsistencyDuringRailFinalization)
	return ok
}


// IsLockupNotSettledRateChangeNotAllowed checks if the error is a LockupNotSettledRateChangeNotAllowed error
func IsLockupNotSettledRateChangeNotAllowed(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*LockupNotSettledRateChangeNotAllowed)
	return ok
}


// IsLockupPeriodChangeNotAllowedDueToInsufficientFunds checks if the error is a LockupPeriodChangeNotAllowedDueToInsufficientFunds error
func IsLockupPeriodChangeNotAllowedDueToInsufficientFunds(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*LockupPeriodChangeNotAllowedDueToInsufficientFunds)
	return ok
}


// IsLockupPeriodExceedsOperatorMaximum checks if the error is a LockupPeriodExceedsOperatorMaximum error
func IsLockupPeriodExceedsOperatorMaximum(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*LockupPeriodExceedsOperatorMaximum)
	return ok
}


// IsLockupRateInconsistent checks if the error is a LockupRateInconsistent error
func IsLockupRateInconsistent(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*LockupRateInconsistent)
	return ok
}


// IsLockupRateLessThanOldRate checks if the error is a LockupRateLessThanOldRate error
func IsLockupRateLessThanOldRate(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*LockupRateLessThanOldRate)
	return ok
}


// IsMaxProvingPeriodZero checks if the error is a MaxProvingPeriodZero error
func IsMaxProvingPeriodZero(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*MaxProvingPeriodZero)
	return ok
}


// IsMetadataArrayCountMismatch checks if the error is a MetadataArrayCountMismatch error
func IsMetadataArrayCountMismatch(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*MetadataArrayCountMismatch)
	return ok
}


// IsMetadataKeyAndValueLengthMismatch checks if the error is a MetadataKeyAndValueLengthMismatch error
func IsMetadataKeyAndValueLengthMismatch(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*MetadataKeyAndValueLengthMismatch)
	return ok
}


// IsMetadataKeyExceedsMaxLength checks if the error is a MetadataKeyExceedsMaxLength error
func IsMetadataKeyExceedsMaxLength(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*MetadataKeyExceedsMaxLength)
	return ok
}


// IsMetadataValueExceedsMaxLength checks if the error is a MetadataValueExceedsMaxLength error
func IsMetadataValueExceedsMaxLength(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*MetadataValueExceedsMaxLength)
	return ok
}


// IsMissingServiceFeeRecipient checks if the error is a MissingServiceFeeRecipient error
func IsMissingServiceFeeRecipient(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*MissingServiceFeeRecipient)
	return ok
}


// IsMustSendExactNativeAmount checks if the error is a MustSendExactNativeAmount error
func IsMustSendExactNativeAmount(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*MustSendExactNativeAmount)
	return ok
}


// IsNativeTokenNotAccepted checks if the error is a NativeTokenNotAccepted error
func IsNativeTokenNotAccepted(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*NativeTokenNotAccepted)
	return ok
}


// IsNativeTokenNotSupported checks if the error is a NativeTokenNotSupported error
func IsNativeTokenNotSupported(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*NativeTokenNotSupported)
	return ok
}


// IsNativeTransferFailed checks if the error is a NativeTransferFailed error
func IsNativeTransferFailed(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*NativeTransferFailed)
	return ok
}


// IsNextProvingPeriodAlreadyCalled checks if the error is a NextProvingPeriodAlreadyCalled error
func IsNextProvingPeriodAlreadyCalled(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*NextProvingPeriodAlreadyCalled)
	return ok
}


// IsNoPDPPaymentRail checks if the error is a NoPDPPaymentRail error
func IsNoPDPPaymentRail(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*NoPDPPaymentRail)
	return ok
}


// IsNoProgressInSettlement checks if the error is a NoProgressInSettlement error
func IsNoProgressInSettlement(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*NoProgressInSettlement)
	return ok
}


// IsNotAuthorizedToTerminateRail checks if the error is a NotAuthorizedToTerminateRail error
func IsNotAuthorizedToTerminateRail(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*NotAuthorizedToTerminateRail)
	return ok
}


// IsOldServiceProviderMismatch checks if the error is a OldServiceProviderMismatch error
func IsOldServiceProviderMismatch(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*OldServiceProviderMismatch)
	return ok
}


// IsOneTimePaymentExceedsLockup checks if the error is a OneTimePaymentExceedsLockup error
func IsOneTimePaymentExceedsLockup(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*OneTimePaymentExceedsLockup)
	return ok
}


// IsOnlyFilBeamControllerAllowed checks if the error is a OnlyFilBeamControllerAllowed error
func IsOnlyFilBeamControllerAllowed(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*OnlyFilBeamControllerAllowed)
	return ok
}


// IsOnlyPDPVerifierAllowed checks if the error is a OnlyPDPVerifierAllowed error
func IsOnlyPDPVerifierAllowed(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*OnlyPDPVerifierAllowed)
	return ok
}


// IsOnlyRailClientAllowed checks if the error is a OnlyRailClientAllowed error
func IsOnlyRailClientAllowed(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*OnlyRailClientAllowed)
	return ok
}


// IsOnlyRailOperatorAllowed checks if the error is a OnlyRailOperatorAllowed error
func IsOnlyRailOperatorAllowed(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*OnlyRailOperatorAllowed)
	return ok
}


// IsOnlyRailParticipantAllowed checks if the error is a OnlyRailParticipantAllowed error
func IsOnlyRailParticipantAllowed(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*OnlyRailParticipantAllowed)
	return ok
}


// IsOnlySelf checks if the error is a OnlySelf error
func IsOnlySelf(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*OnlySelf)
	return ok
}


// IsOperatorLockupAllowanceExceeded checks if the error is a OperatorLockupAllowanceExceeded error
func IsOperatorLockupAllowanceExceeded(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*OperatorLockupAllowanceExceeded)
	return ok
}


// IsOperatorNotApproved checks if the error is a OperatorNotApproved error
func IsOperatorNotApproved(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*OperatorNotApproved)
	return ok
}


// IsOperatorRateAllowanceExceeded checks if the error is a OperatorRateAllowanceExceeded error
func IsOperatorRateAllowanceExceeded(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*OperatorRateAllowanceExceeded)
	return ok
}


// IsPaymentRailsNotFinalized checks if the error is a PaymentRailsNotFinalized error
func IsPaymentRailsNotFinalized(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*PaymentRailsNotFinalized)
	return ok
}


// IsProofAlreadySubmitted checks if the error is a ProofAlreadySubmitted error
func IsProofAlreadySubmitted(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*ProofAlreadySubmitted)
	return ok
}


// IsProviderAlreadyApproved checks if the error is a ProviderAlreadyApproved error
func IsProviderAlreadyApproved(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*ProviderAlreadyApproved)
	return ok
}


// IsProviderNotApproved checks if the error is a ProviderNotApproved error
func IsProviderNotApproved(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*ProviderNotApproved)
	return ok
}


// IsProviderNotInApprovedList checks if the error is a ProviderNotInApprovedList error
func IsProviderNotInApprovedList(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*ProviderNotInApprovedList)
	return ok
}


// IsProviderNotRegistered checks if the error is a ProviderNotRegistered error
func IsProviderNotRegistered(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*ProviderNotRegistered)
	return ok
}


// IsProvingNotStarted checks if the error is a ProvingNotStarted error
func IsProvingNotStarted(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*ProvingNotStarted)
	return ok
}


// IsProvingPeriodNotInitialized checks if the error is a ProvingPeriodNotInitialized error
func IsProvingPeriodNotInitialized(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*ProvingPeriodNotInitialized)
	return ok
}


// IsProvingPeriodPassed checks if the error is a ProvingPeriodPassed error
func IsProvingPeriodPassed(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*ProvingPeriodPassed)
	return ok
}


// IsRailAlreadyTerminated checks if the error is a RailAlreadyTerminated error
func IsRailAlreadyTerminated(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*RailAlreadyTerminated)
	return ok
}


// IsRailInactiveOrSettled checks if the error is a RailInactiveOrSettled error
func IsRailInactiveOrSettled(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*RailInactiveOrSettled)
	return ok
}


// IsRailNotAssociated checks if the error is a RailNotAssociated error
func IsRailNotAssociated(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*RailNotAssociated)
	return ok
}


// IsRailNotTerminated checks if the error is a RailNotTerminated error
func IsRailNotTerminated(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*RailNotTerminated)
	return ok
}


// IsRateChangeNotAllowedOnTerminatedRail checks if the error is a RateChangeNotAllowedOnTerminatedRail error
func IsRateChangeNotAllowedOnTerminatedRail(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*RateChangeNotAllowedOnTerminatedRail)
	return ok
}


// IsRateChangeQueueNotEmpty checks if the error is a RateChangeQueueNotEmpty error
func IsRateChangeQueueNotEmpty(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*RateChangeQueueNotEmpty)
	return ok
}


// IsServiceContractMustTerminateRail checks if the error is a ServiceContractMustTerminateRail error
func IsServiceContractMustTerminateRail(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*ServiceContractMustTerminateRail)
	return ok
}


// IsSignerMustBeMsgSender checks if the error is a SignerMustBeMsgSender error
func IsSignerMustBeMsgSender(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*SignerMustBeMsgSender)
	return ok
}


// IsTooManyMetadataKeys checks if the error is a TooManyMetadataKeys error
func IsTooManyMetadataKeys(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*TooManyMetadataKeys)
	return ok
}


// IsUnsupportedSignatureV checks if the error is a UnsupportedSignatureV error
func IsUnsupportedSignatureV(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*UnsupportedSignatureV)
	return ok
}


// IsValidatorModifiedAmountExceedsMaximum checks if the error is a ValidatorModifiedAmountExceedsMaximum error
func IsValidatorModifiedAmountExceedsMaximum(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*ValidatorModifiedAmountExceedsMaximum)
	return ok
}


// IsValidatorSettledBeforeSegmentStart checks if the error is a ValidatorSettledBeforeSegmentStart error
func IsValidatorSettledBeforeSegmentStart(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*ValidatorSettledBeforeSegmentStart)
	return ok
}


// IsValidatorSettledBeyondSegmentEnd checks if the error is a ValidatorSettledBeyondSegmentEnd error
func IsValidatorSettledBeyondSegmentEnd(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*ValidatorSettledBeyondSegmentEnd)
	return ok
}


// IsWithdrawAmountExceedsAccumulatedFees checks if the error is a WithdrawAmountExceedsAccumulatedFees error
func IsWithdrawAmountExceedsAccumulatedFees(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*WithdrawAmountExceedsAccumulatedFees)
	return ok
}


// IsZeroAddress checks if the error is a ZeroAddress error
func IsZeroAddress(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*ZeroAddress)
	return ok
}


// IsZeroAddressNotAllowed checks if the error is a ZeroAddressNotAllowed error
func IsZeroAddressNotAllowed(err error) bool {
	if err == nil {
		return false
	}
	_, ok := err.(*ZeroAddressNotAllowed)
	return ok
}



// GetErrorName returns the error name if it's a contract error, otherwise returns "UnknownError"
func GetErrorName(err error) string {
	if cerr, ok := err.(ContractError); ok {
		return cerr.ErrorName()
	}
	return "UnknownError"
}

// GetErrorSelector returns the error selector if it's a contract error, otherwise returns empty string
func GetErrorSelector(err error) string {
	if cerr, ok := err.(ContractError); ok {
		return cerr.ErrorSelector()
	}
	return ""
}
