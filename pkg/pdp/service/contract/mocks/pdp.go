// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/storacha/piri/pkg/pdp/service/contract (interfaces: PDP)
//
// Generated by this command:
//
//	mockgen -destination=./internal/mocks/pdp.go -package=mocks github.com/storacha/piri/pkg/pdp/service/contract PDP
//

// Package mocks is a generated GoMock package.
package mocks

import (
	"reflect"

	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"go.uber.org/mock/gomock"

	"github.com/storacha/piri/pkg/pdp/service/contract"
)

// MockPDP is a mock of PDP interface.
type MockPDP struct {
	ctrl     *gomock.Controller
	recorder *MockPDPMockRecorder
	isgomock struct{}
}

// MockPDPMockRecorder is the mock recorder for MockPDP.
type MockPDPMockRecorder struct {
	mock *MockPDP
}

// NewMockPDP creates a new mock instance.
func NewMockPDP(ctrl *gomock.Controller) *MockPDP {
	mock := &MockPDP{ctrl: ctrl}
	mock.recorder = &MockPDPMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPDP) EXPECT() *MockPDPMockRecorder {
	return m.recorder
}

// GetProofSetIdFromReceipt mocks base method.
func (m *MockPDP) GetProofSetIdFromReceipt(receipt *types.Receipt) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProofSetIdFromReceipt", receipt)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProofSetIdFromReceipt indicates an expected call of GetProofSetIdFromReceipt.
func (mr *MockPDPMockRecorder) GetProofSetIdFromReceipt(receipt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProofSetIdFromReceipt", reflect.TypeOf((*MockPDP)(nil).GetProofSetIdFromReceipt), receipt)
}

// GetRootIdsFromReceipt mocks base method.
func (m *MockPDP) GetRootIdsFromReceipt(receipt *types.Receipt) ([]uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRootIdsFromReceipt", receipt)
	ret0, _ := ret[0].([]uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRootIdsFromReceipt indicates an expected call of GetRootIdsFromReceipt.
func (mr *MockPDPMockRecorder) GetRootIdsFromReceipt(receipt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRootIdsFromReceipt", reflect.TypeOf((*MockPDP)(nil).GetRootIdsFromReceipt), receipt)
}

// NewIPDPProvingSchedule mocks base method.
func (m *MockPDP) NewIPDPProvingSchedule(address common.Address, backend bind.ContractBackend) (contract.PDPProvingSchedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewIPDPProvingSchedule", address, backend)
	ret0, _ := ret[0].(contract.PDPProvingSchedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewIPDPProvingSchedule indicates an expected call of NewIPDPProvingSchedule.
func (mr *MockPDPMockRecorder) NewIPDPProvingSchedule(address, backend any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewIPDPProvingSchedule", reflect.TypeOf((*MockPDP)(nil).NewIPDPProvingSchedule), address, backend)
}

// NewPDPVerifier mocks base method.
func (m *MockPDP) NewPDPVerifier(address common.Address, backend bind.ContractBackend) (contract.PDPVerifier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewPDPVerifier", address, backend)
	ret0, _ := ret[0].(contract.PDPVerifier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewPDPVerifier indicates an expected call of NewPDPVerifier.
func (mr *MockPDPMockRecorder) NewPDPVerifier(address, backend any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewPDPVerifier", reflect.TypeOf((*MockPDP)(nil).NewPDPVerifier), address, backend)
}
