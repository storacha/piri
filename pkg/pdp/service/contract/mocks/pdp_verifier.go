// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/storacha/storage/pkg/pdp/service/contract (interfaces: PDPVerifier)
//
// Generated by this command:
//
//	mockgen -destination=./pkg/pdp/service/contract/mocks/pdp_verifier.go -package=mocks github.com/storacha/storage/pkg/pdp/service/contract PDPVerifier
//

// Package mocks is a generated GoMock package.
package mocks

import (
	big "math/big"
	reflect "reflect"

	bind "github.com/ethereum/go-ethereum/accounts/abi/bind"
	common "github.com/ethereum/go-ethereum/common"
	internal "github.com/storacha/storage/pkg/pdp/service/contract/internal"
	gomock "go.uber.org/mock/gomock"
)

// MockPDPVerifier is a mock of PDPVerifier interface.
type MockPDPVerifier struct {
	ctrl     *gomock.Controller
	recorder *MockPDPVerifierMockRecorder
	isgomock struct{}
}

// MockPDPVerifierMockRecorder is the mock recorder for MockPDPVerifier.
type MockPDPVerifierMockRecorder struct {
	mock *MockPDPVerifier
}

// NewMockPDPVerifier creates a new mock instance.
func NewMockPDPVerifier(ctrl *gomock.Controller) *MockPDPVerifier {
	mock := &MockPDPVerifier{ctrl: ctrl}
	mock.recorder = &MockPDPVerifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPDPVerifier) EXPECT() *MockPDPVerifierMockRecorder {
	return m.recorder
}

// CalculateProofFee mocks base method.
func (m *MockPDPVerifier) CalculateProofFee(opts *bind.CallOpts, setId, estimatedGasFee *big.Int) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateProofFee", opts, setId, estimatedGasFee)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalculateProofFee indicates an expected call of CalculateProofFee.
func (mr *MockPDPVerifierMockRecorder) CalculateProofFee(opts, setId, estimatedGasFee any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateProofFee", reflect.TypeOf((*MockPDPVerifier)(nil).CalculateProofFee), opts, setId, estimatedGasFee)
}

// FindRootIds mocks base method.
func (m *MockPDPVerifier) FindRootIds(opts *bind.CallOpts, setId *big.Int, leafIndexs []*big.Int) ([]internal.PDPVerifierRootIdAndOffset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRootIds", opts, setId, leafIndexs)
	ret0, _ := ret[0].([]internal.PDPVerifierRootIdAndOffset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRootIds indicates an expected call of FindRootIds.
func (mr *MockPDPVerifierMockRecorder) FindRootIds(opts, setId, leafIndexs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRootIds", reflect.TypeOf((*MockPDPVerifier)(nil).FindRootIds), opts, setId, leafIndexs)
}

// GetChallengeFinality mocks base method.
func (m *MockPDPVerifier) GetChallengeFinality(opts *bind.CallOpts) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChallengeFinality", opts)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChallengeFinality indicates an expected call of GetChallengeFinality.
func (mr *MockPDPVerifierMockRecorder) GetChallengeFinality(opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChallengeFinality", reflect.TypeOf((*MockPDPVerifier)(nil).GetChallengeFinality), opts)
}

// GetChallengeRange mocks base method.
func (m *MockPDPVerifier) GetChallengeRange(opts *bind.CallOpts, setId *big.Int) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChallengeRange", opts, setId)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChallengeRange indicates an expected call of GetChallengeRange.
func (mr *MockPDPVerifierMockRecorder) GetChallengeRange(opts, setId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChallengeRange", reflect.TypeOf((*MockPDPVerifier)(nil).GetChallengeRange), opts, setId)
}

// GetNextChallengeEpoch mocks base method.
func (m *MockPDPVerifier) GetNextChallengeEpoch(opts *bind.CallOpts, setId *big.Int) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNextChallengeEpoch", opts, setId)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNextChallengeEpoch indicates an expected call of GetNextChallengeEpoch.
func (mr *MockPDPVerifierMockRecorder) GetNextChallengeEpoch(opts, setId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNextChallengeEpoch", reflect.TypeOf((*MockPDPVerifier)(nil).GetNextChallengeEpoch), opts, setId)
}

// GetProofSetListener mocks base method.
func (m *MockPDPVerifier) GetProofSetListener(opts *bind.CallOpts, setId *big.Int) (common.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProofSetListener", opts, setId)
	ret0, _ := ret[0].(common.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProofSetListener indicates an expected call of GetProofSetListener.
func (mr *MockPDPVerifierMockRecorder) GetProofSetListener(opts, setId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProofSetListener", reflect.TypeOf((*MockPDPVerifier)(nil).GetProofSetListener), opts, setId)
}

// GetProofSetOwner mocks base method.
func (m *MockPDPVerifier) GetProofSetOwner(opts *bind.CallOpts, setId *big.Int) (common.Address, common.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProofSetOwner", opts, setId)
	ret0, _ := ret[0].(common.Address)
	ret1, _ := ret[1].(common.Address)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetProofSetOwner indicates an expected call of GetProofSetOwner.
func (mr *MockPDPVerifierMockRecorder) GetProofSetOwner(opts, setId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProofSetOwner", reflect.TypeOf((*MockPDPVerifier)(nil).GetProofSetOwner), opts, setId)
}

// GetScheduledRemovals mocks base method.
func (m *MockPDPVerifier) GetScheduledRemovals(opts *bind.CallOpts, setId *big.Int) ([]*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScheduledRemovals", opts, setId)
	ret0, _ := ret[0].([]*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScheduledRemovals indicates an expected call of GetScheduledRemovals.
func (mr *MockPDPVerifierMockRecorder) GetScheduledRemovals(opts, setId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScheduledRemovals", reflect.TypeOf((*MockPDPVerifier)(nil).GetScheduledRemovals), opts, setId)
}
