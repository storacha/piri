// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/storacha/storage/pkg/pdp/tasks (interfaces: SenderETHClient)
//
// Generated by this command:
//
//	mockgen -destination=./internal/mocks/sender_eth_client.go -package=mocks github.com/storacha/storage/pkg/pdp/tasks SenderETHClient
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	big "math/big"
	reflect "reflect"

	ethereum "github.com/ethereum/go-ethereum"
	common "github.com/ethereum/go-ethereum/common"
	types "github.com/ethereum/go-ethereum/core/types"
	gomock "go.uber.org/mock/gomock"
)

// MockSenderETHClient is a mock of SenderETHClient interface.
type MockSenderETHClient struct {
	ctrl     *gomock.Controller
	recorder *MockSenderETHClientMockRecorder
	isgomock struct{}
}

// MockSenderETHClientMockRecorder is the mock recorder for MockSenderETHClient.
type MockSenderETHClientMockRecorder struct {
	mock *MockSenderETHClient
}

// NewMockSenderETHClient creates a new mock instance.
func NewMockSenderETHClient(ctrl *gomock.Controller) *MockSenderETHClient {
	mock := &MockSenderETHClient{ctrl: ctrl}
	mock.recorder = &MockSenderETHClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSenderETHClient) EXPECT() *MockSenderETHClientMockRecorder {
	return m.recorder
}

// EstimateGas mocks base method.
func (m *MockSenderETHClient) EstimateGas(ctx context.Context, msg ethereum.CallMsg) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EstimateGas", ctx, msg)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EstimateGas indicates an expected call of EstimateGas.
func (mr *MockSenderETHClientMockRecorder) EstimateGas(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstimateGas", reflect.TypeOf((*MockSenderETHClient)(nil).EstimateGas), ctx, msg)
}

// HeaderByNumber mocks base method.
func (m *MockSenderETHClient) HeaderByNumber(ctx context.Context, number *big.Int) (*types.Header, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HeaderByNumber", ctx, number)
	ret0, _ := ret[0].(*types.Header)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HeaderByNumber indicates an expected call of HeaderByNumber.
func (mr *MockSenderETHClientMockRecorder) HeaderByNumber(ctx, number any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeaderByNumber", reflect.TypeOf((*MockSenderETHClient)(nil).HeaderByNumber), ctx, number)
}

// NetworkID mocks base method.
func (m *MockSenderETHClient) NetworkID(ctx context.Context) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkID", ctx)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NetworkID indicates an expected call of NetworkID.
func (mr *MockSenderETHClientMockRecorder) NetworkID(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkID", reflect.TypeOf((*MockSenderETHClient)(nil).NetworkID), ctx)
}

// PendingNonceAt mocks base method.
func (m *MockSenderETHClient) PendingNonceAt(ctx context.Context, account common.Address) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PendingNonceAt", ctx, account)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PendingNonceAt indicates an expected call of PendingNonceAt.
func (mr *MockSenderETHClientMockRecorder) PendingNonceAt(ctx, account any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PendingNonceAt", reflect.TypeOf((*MockSenderETHClient)(nil).PendingNonceAt), ctx, account)
}

// SendTransaction mocks base method.
func (m *MockSenderETHClient) SendTransaction(ctx context.Context, transaction *types.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendTransaction", ctx, transaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendTransaction indicates an expected call of SendTransaction.
func (mr *MockSenderETHClientMockRecorder) SendTransaction(ctx, transaction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTransaction", reflect.TypeOf((*MockSenderETHClient)(nil).SendTransaction), ctx, transaction)
}

// SuggestGasTipCap mocks base method.
func (m *MockSenderETHClient) SuggestGasTipCap(ctx context.Context) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SuggestGasTipCap", ctx)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SuggestGasTipCap indicates an expected call of SuggestGasTipCap.
func (mr *MockSenderETHClientMockRecorder) SuggestGasTipCap(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SuggestGasTipCap", reflect.TypeOf((*MockSenderETHClient)(nil).SuggestGasTipCap), ctx)
}
