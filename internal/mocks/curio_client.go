// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/pdp/curio/client.go
//
// Generated by this command:
//
//	mockgen -source=./pkg/pdp/curio/client.go -destination=./internal/mocks/curio_client.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	io "io"
	url "net/url"
	reflect "reflect"

	curio "github.com/storacha/piri/pkg/pdp/curio"
	gomock "go.uber.org/mock/gomock"
)

// MockPDPClient is a mock of PDPClient interface.
type MockPDPClient struct {
	ctrl     *gomock.Controller
	recorder *MockPDPClientMockRecorder
	isgomock struct{}
}

// MockPDPClientMockRecorder is the mock recorder for MockPDPClient.
type MockPDPClientMockRecorder struct {
	mock *MockPDPClient
}

// NewMockPDPClient creates a new mock instance.
func NewMockPDPClient(ctrl *gomock.Controller) *MockPDPClient {
	mock := &MockPDPClient{ctrl: ctrl}
	mock.recorder = &MockPDPClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPDPClient) EXPECT() *MockPDPClientMockRecorder {
	return m.recorder
}

// AddPiece mocks base method.
func (m *MockPDPClient) AddPiece(ctx context.Context, addPiece curio.AddPiece) (*curio.UploadRef, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPiece", ctx, addPiece)
	ret0, _ := ret[0].(*curio.UploadRef)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPiece indicates an expected call of AddPiece.
func (mr *MockPDPClientMockRecorder) AddPiece(ctx, addPiece any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPiece", reflect.TypeOf((*MockPDPClient)(nil).AddPiece), ctx, addPiece)
}

// AddRootsToProofSet mocks base method.
func (m *MockPDPClient) AddRootsToProofSet(ctx context.Context, id uint64, addRoots []curio.AddRootRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRootsToProofSet", ctx, id, addRoots)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRootsToProofSet indicates an expected call of AddRootsToProofSet.
func (mr *MockPDPClientMockRecorder) AddRootsToProofSet(ctx, id, addRoots any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRootsToProofSet", reflect.TypeOf((*MockPDPClient)(nil).AddRootsToProofSet), ctx, id, addRoots)
}

// CreateProofSet mocks base method.
func (m *MockPDPClient) CreateProofSet(ctx context.Context, request curio.CreateProofSet) (curio.StatusRef, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProofSet", ctx, request)
	ret0, _ := ret[0].(curio.StatusRef)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProofSet indicates an expected call of CreateProofSet.
func (mr *MockPDPClientMockRecorder) CreateProofSet(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProofSet", reflect.TypeOf((*MockPDPClient)(nil).CreateProofSet), ctx, request)
}

// DeleteProofSet mocks base method.
func (m *MockPDPClient) DeleteProofSet(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProofSet", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProofSet indicates an expected call of DeleteProofSet.
func (mr *MockPDPClientMockRecorder) DeleteProofSet(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProofSet", reflect.TypeOf((*MockPDPClient)(nil).DeleteProofSet), ctx, id)
}

// FindPiece mocks base method.
func (m *MockPDPClient) FindPiece(ctx context.Context, piece curio.PieceHash) (curio.FoundPiece, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPiece", ctx, piece)
	ret0, _ := ret[0].(curio.FoundPiece)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPiece indicates an expected call of FindPiece.
func (mr *MockPDPClientMockRecorder) FindPiece(ctx, piece any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPiece", reflect.TypeOf((*MockPDPClient)(nil).FindPiece), ctx, piece)
}

// GetPiece mocks base method.
func (m *MockPDPClient) GetPiece(ctx context.Context, pieceCid string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPiece", ctx, pieceCid)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPiece indicates an expected call of GetPiece.
func (mr *MockPDPClientMockRecorder) GetPiece(ctx, pieceCid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPiece", reflect.TypeOf((*MockPDPClient)(nil).GetPiece), ctx, pieceCid)
}

// GetPieceURL mocks base method.
func (m *MockPDPClient) GetPieceURL(pieceCid string) url.URL {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPieceURL", pieceCid)
	ret0, _ := ret[0].(url.URL)
	return ret0
}

// GetPieceURL indicates an expected call of GetPieceURL.
func (mr *MockPDPClientMockRecorder) GetPieceURL(pieceCid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPieceURL", reflect.TypeOf((*MockPDPClient)(nil).GetPieceURL), pieceCid)
}

// GetProofSet mocks base method.
func (m *MockPDPClient) GetProofSet(ctx context.Context, id uint64) (curio.ProofSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProofSet", ctx, id)
	ret0, _ := ret[0].(curio.ProofSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProofSet indicates an expected call of GetProofSet.
func (mr *MockPDPClientMockRecorder) GetProofSet(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProofSet", reflect.TypeOf((*MockPDPClient)(nil).GetProofSet), ctx, id)
}

// Ping mocks base method.
func (m *MockPDPClient) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockPDPClientMockRecorder) Ping(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockPDPClient)(nil).Ping), ctx)
}

// ProofSetCreationStatus mocks base method.
func (m *MockPDPClient) ProofSetCreationStatus(ctx context.Context, ref curio.StatusRef) (curio.ProofSetStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProofSetCreationStatus", ctx, ref)
	ret0, _ := ret[0].(curio.ProofSetStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProofSetCreationStatus indicates an expected call of ProofSetCreationStatus.
func (mr *MockPDPClientMockRecorder) ProofSetCreationStatus(ctx, ref any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProofSetCreationStatus", reflect.TypeOf((*MockPDPClient)(nil).ProofSetCreationStatus), ctx, ref)
}

// UploadPiece mocks base method.
func (m *MockPDPClient) UploadPiece(ctx context.Context, ref curio.UploadRef, data io.Reader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadPiece", ctx, ref, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadPiece indicates an expected call of UploadPiece.
func (mr *MockPDPClientMockRecorder) UploadPiece(ctx, ref, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadPiece", reflect.TypeOf((*MockPDPClient)(nil).UploadPiece), ctx, ref, data)
}
