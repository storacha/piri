// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/pdp/aggregator/fns/fns.go
//
// Generated by this command:
//
//	mockgen -source=./pkg/pdp/aggregator/fns/fns.go -destination=./internal/mocks/buffered_aggregator.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	piece "github.com/storacha/go-libstoracha/piece/piece"
	aggregate "github.com/storacha/storage/pkg/pdp/aggregator/aggregate"
	fns "github.com/storacha/storage/pkg/pdp/aggregator/fns"
	gomock "go.uber.org/mock/gomock"
)

// MockBufferedAggregator is a mock of BufferedAggregator interface.
type MockBufferedAggregator struct {
	ctrl     *gomock.Controller
	recorder *MockBufferedAggregatorMockRecorder
	isgomock struct{}
}

// MockBufferedAggregatorMockRecorder is the mock recorder for MockBufferedAggregator.
type MockBufferedAggregatorMockRecorder struct {
	mock *MockBufferedAggregator
}

// NewMockBufferedAggregator creates a new mock instance.
func NewMockBufferedAggregator(ctrl *gomock.Controller) *MockBufferedAggregator {
	mock := &MockBufferedAggregator{ctrl: ctrl}
	mock.recorder = &MockBufferedAggregatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBufferedAggregator) EXPECT() *MockBufferedAggregatorMockRecorder {
	return m.recorder
}

// AggregatePiece mocks base method.
func (m *MockBufferedAggregator) AggregatePiece(buffer fns.Buffer, newPiece piece.PieceLink) (fns.Buffer, *aggregate.Aggregate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AggregatePiece", buffer, newPiece)
	ret0, _ := ret[0].(fns.Buffer)
	ret1, _ := ret[1].(*aggregate.Aggregate)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AggregatePiece indicates an expected call of AggregatePiece.
func (mr *MockBufferedAggregatorMockRecorder) AggregatePiece(buffer, newPiece any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AggregatePiece", reflect.TypeOf((*MockBufferedAggregator)(nil).AggregatePiece), buffer, newPiece)
}

// AggregatePieces mocks base method.
func (m *MockBufferedAggregator) AggregatePieces(buffer fns.Buffer, pieces []piece.PieceLink) (fns.Buffer, []aggregate.Aggregate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AggregatePieces", buffer, pieces)
	ret0, _ := ret[0].(fns.Buffer)
	ret1, _ := ret[1].([]aggregate.Aggregate)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AggregatePieces indicates an expected call of AggregatePieces.
func (mr *MockBufferedAggregatorMockRecorder) AggregatePieces(buffer, pieces any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AggregatePieces", reflect.TypeOf((*MockBufferedAggregator)(nil).AggregatePieces), buffer, pieces)
}
