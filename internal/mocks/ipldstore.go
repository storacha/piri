// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/ipldstore/ipldstore.go
//
// Generated by this command:
//
//	mockgen -source=./internal/ipldstore/ipldstore.go -destination=./internal/mocks/ipldstore_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockKVStore is a mock of KVStore interface.
type MockKVStore[K any, V any] struct {
	ctrl     *gomock.Controller
	recorder *MockKVStoreMockRecorder[K, V]
	isgomock struct{}
}

// MockKVStoreMockRecorder is the mock recorder for MockKVStore.
type MockKVStoreMockRecorder[K any, V any] struct {
	mock *MockKVStore[K, V]
}

// NewMockKVStore creates a new mock instance.
func NewMockKVStore[K any, V any](ctrl *gomock.Controller) *MockKVStore[K, V] {
	mock := &MockKVStore[K, V]{ctrl: ctrl}
	mock.recorder = &MockKVStoreMockRecorder[K, V]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKVStore[K, V]) EXPECT() *MockKVStoreMockRecorder[K, V] {
	return m.recorder
}

// Get mocks base method.
func (m *MockKVStore[K, V]) Get(ctx context.Context, key K) (V, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].(V)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockKVStoreMockRecorder[K, V]) Get(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockKVStore[K, V])(nil).Get), ctx, key)
}

// Put mocks base method.
func (m *MockKVStore[K, V]) Put(ctx context.Context, key K, value V) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", ctx, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockKVStoreMockRecorder[K, V]) Put(ctx, key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockKVStore[K, V])(nil).Put), ctx, key, value)
}
