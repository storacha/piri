// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/pdp/types/api.go
//
// Generated by this command:
//
//	mockgen -source=./pkg/pdp/types/api.go -destination=./internal/mocks/pdp_api.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	common "github.com/ethereum/go-ethereum/common"
	cid "github.com/ipfs/go-cid"
	types "github.com/storacha/piri/pkg/pdp/types"
	gomock "go.uber.org/mock/gomock"
)

// MockAPI is a mock of API interface.
type MockAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAPIMockRecorder
	isgomock struct{}
}

// MockAPIMockRecorder is the mock recorder for MockAPI.
type MockAPIMockRecorder struct {
	mock *MockAPI
}

// NewMockAPI creates a new mock instance.
func NewMockAPI(ctrl *gomock.Controller) *MockAPI {
	mock := &MockAPI{ctrl: ctrl}
	mock.recorder = &MockAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPI) EXPECT() *MockAPIMockRecorder {
	return m.recorder
}

// AddRoots mocks base method.
func (m *MockAPI) AddRoots(ctx context.Context, proofSetID uint64, roots []types.RootAdd) (common.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRoots", ctx, proofSetID, roots)
	ret0, _ := ret[0].(common.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddRoots indicates an expected call of AddRoots.
func (mr *MockAPIMockRecorder) AddRoots(ctx, proofSetID, roots any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRoots", reflect.TypeOf((*MockAPI)(nil).AddRoots), ctx, proofSetID, roots)
}

// AllocatePiece mocks base method.
func (m *MockAPI) AllocatePiece(ctx context.Context, allocation types.PieceAllocation) (*types.AllocatedPiece, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocatePiece", ctx, allocation)
	ret0, _ := ret[0].(*types.AllocatedPiece)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocatePiece indicates an expected call of AllocatePiece.
func (mr *MockAPIMockRecorder) AllocatePiece(ctx, allocation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocatePiece", reflect.TypeOf((*MockAPI)(nil).AllocatePiece), ctx, allocation)
}

// CreateProofSet mocks base method.
func (m *MockAPI) CreateProofSet(ctx context.Context, recordKeeper common.Address) (common.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProofSet", ctx, recordKeeper)
	ret0, _ := ret[0].(common.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProofSet indicates an expected call of CreateProofSet.
func (mr *MockAPIMockRecorder) CreateProofSet(ctx, recordKeeper any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProofSet", reflect.TypeOf((*MockAPI)(nil).CreateProofSet), ctx, recordKeeper)
}

// FindPiece mocks base method.
func (m *MockAPI) FindPiece(ctx context.Context, piece types.Piece) (cid.Cid, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPiece", ctx, piece)
	ret0, _ := ret[0].(cid.Cid)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindPiece indicates an expected call of FindPiece.
func (mr *MockAPIMockRecorder) FindPiece(ctx, piece any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPiece", reflect.TypeOf((*MockAPI)(nil).FindPiece), ctx, piece)
}

// GetProofSet mocks base method.
func (m *MockAPI) GetProofSet(ctx context.Context, proofSetID uint64) (*types.ProofSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProofSet", ctx, proofSetID)
	ret0, _ := ret[0].(*types.ProofSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProofSet indicates an expected call of GetProofSet.
func (mr *MockAPIMockRecorder) GetProofSet(ctx, proofSetID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProofSet", reflect.TypeOf((*MockAPI)(nil).GetProofSet), ctx, proofSetID)
}

// GetProofSetStatus mocks base method.
func (m *MockAPI) GetProofSetStatus(ctx context.Context, txHash common.Hash) (*types.ProofSetStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProofSetStatus", ctx, txHash)
	ret0, _ := ret[0].(*types.ProofSetStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProofSetStatus indicates an expected call of GetProofSetStatus.
func (mr *MockAPIMockRecorder) GetProofSetStatus(ctx, txHash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProofSetStatus", reflect.TypeOf((*MockAPI)(nil).GetProofSetStatus), ctx, txHash)
}

// ReadPiece mocks base method.
func (m *MockAPI) ReadPiece(ctx context.Context, piece cid.Cid) (*types.PieceReader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadPiece", ctx, piece)
	ret0, _ := ret[0].(*types.PieceReader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadPiece indicates an expected call of ReadPiece.
func (mr *MockAPIMockRecorder) ReadPiece(ctx, piece any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadPiece", reflect.TypeOf((*MockAPI)(nil).ReadPiece), ctx, piece)
}

// RemoveRoot mocks base method.
func (m *MockAPI) RemoveRoot(ctx context.Context, proofSetID, rootID uint64) (common.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRoot", ctx, proofSetID, rootID)
	ret0, _ := ret[0].(common.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveRoot indicates an expected call of RemoveRoot.
func (mr *MockAPIMockRecorder) RemoveRoot(ctx, proofSetID, rootID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRoot", reflect.TypeOf((*MockAPI)(nil).RemoveRoot), ctx, proofSetID, rootID)
}

// UploadPiece mocks base method.
func (m *MockAPI) UploadPiece(ctx context.Context, upload types.PieceUpload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadPiece", ctx, upload)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadPiece indicates an expected call of UploadPiece.
func (mr *MockAPIMockRecorder) UploadPiece(ctx, upload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadPiece", reflect.TypeOf((*MockAPI)(nil).UploadPiece), ctx, upload)
}

// MockProofSetAPI is a mock of ProofSetAPI interface.
type MockProofSetAPI struct {
	ctrl     *gomock.Controller
	recorder *MockProofSetAPIMockRecorder
	isgomock struct{}
}

// MockProofSetAPIMockRecorder is the mock recorder for MockProofSetAPI.
type MockProofSetAPIMockRecorder struct {
	mock *MockProofSetAPI
}

// NewMockProofSetAPI creates a new mock instance.
func NewMockProofSetAPI(ctrl *gomock.Controller) *MockProofSetAPI {
	mock := &MockProofSetAPI{ctrl: ctrl}
	mock.recorder = &MockProofSetAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProofSetAPI) EXPECT() *MockProofSetAPIMockRecorder {
	return m.recorder
}

// AddRoots mocks base method.
func (m *MockProofSetAPI) AddRoots(ctx context.Context, proofSetID uint64, roots []types.RootAdd) (common.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRoots", ctx, proofSetID, roots)
	ret0, _ := ret[0].(common.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddRoots indicates an expected call of AddRoots.
func (mr *MockProofSetAPIMockRecorder) AddRoots(ctx, proofSetID, roots any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRoots", reflect.TypeOf((*MockProofSetAPI)(nil).AddRoots), ctx, proofSetID, roots)
}

// CreateProofSet mocks base method.
func (m *MockProofSetAPI) CreateProofSet(ctx context.Context, recordKeeper common.Address) (common.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProofSet", ctx, recordKeeper)
	ret0, _ := ret[0].(common.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProofSet indicates an expected call of CreateProofSet.
func (mr *MockProofSetAPIMockRecorder) CreateProofSet(ctx, recordKeeper any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProofSet", reflect.TypeOf((*MockProofSetAPI)(nil).CreateProofSet), ctx, recordKeeper)
}

// GetProofSet mocks base method.
func (m *MockProofSetAPI) GetProofSet(ctx context.Context, proofSetID uint64) (*types.ProofSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProofSet", ctx, proofSetID)
	ret0, _ := ret[0].(*types.ProofSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProofSet indicates an expected call of GetProofSet.
func (mr *MockProofSetAPIMockRecorder) GetProofSet(ctx, proofSetID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProofSet", reflect.TypeOf((*MockProofSetAPI)(nil).GetProofSet), ctx, proofSetID)
}

// GetProofSetStatus mocks base method.
func (m *MockProofSetAPI) GetProofSetStatus(ctx context.Context, txHash common.Hash) (*types.ProofSetStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProofSetStatus", ctx, txHash)
	ret0, _ := ret[0].(*types.ProofSetStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProofSetStatus indicates an expected call of GetProofSetStatus.
func (mr *MockProofSetAPIMockRecorder) GetProofSetStatus(ctx, txHash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProofSetStatus", reflect.TypeOf((*MockProofSetAPI)(nil).GetProofSetStatus), ctx, txHash)
}

// RemoveRoot mocks base method.
func (m *MockProofSetAPI) RemoveRoot(ctx context.Context, proofSetID, rootID uint64) (common.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRoot", ctx, proofSetID, rootID)
	ret0, _ := ret[0].(common.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveRoot indicates an expected call of RemoveRoot.
func (mr *MockProofSetAPIMockRecorder) RemoveRoot(ctx, proofSetID, rootID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRoot", reflect.TypeOf((*MockProofSetAPI)(nil).RemoveRoot), ctx, proofSetID, rootID)
}

// MockPieceAPI is a mock of PieceAPI interface.
type MockPieceAPI struct {
	ctrl     *gomock.Controller
	recorder *MockPieceAPIMockRecorder
	isgomock struct{}
}

// MockPieceAPIMockRecorder is the mock recorder for MockPieceAPI.
type MockPieceAPIMockRecorder struct {
	mock *MockPieceAPI
}

// NewMockPieceAPI creates a new mock instance.
func NewMockPieceAPI(ctrl *gomock.Controller) *MockPieceAPI {
	mock := &MockPieceAPI{ctrl: ctrl}
	mock.recorder = &MockPieceAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPieceAPI) EXPECT() *MockPieceAPIMockRecorder {
	return m.recorder
}

// AllocatePiece mocks base method.
func (m *MockPieceAPI) AllocatePiece(ctx context.Context, allocation types.PieceAllocation) (*types.AllocatedPiece, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocatePiece", ctx, allocation)
	ret0, _ := ret[0].(*types.AllocatedPiece)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocatePiece indicates an expected call of AllocatePiece.
func (mr *MockPieceAPIMockRecorder) AllocatePiece(ctx, allocation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocatePiece", reflect.TypeOf((*MockPieceAPI)(nil).AllocatePiece), ctx, allocation)
}

// FindPiece mocks base method.
func (m *MockPieceAPI) FindPiece(ctx context.Context, piece types.Piece) (cid.Cid, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPiece", ctx, piece)
	ret0, _ := ret[0].(cid.Cid)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindPiece indicates an expected call of FindPiece.
func (mr *MockPieceAPIMockRecorder) FindPiece(ctx, piece any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPiece", reflect.TypeOf((*MockPieceAPI)(nil).FindPiece), ctx, piece)
}

// ReadPiece mocks base method.
func (m *MockPieceAPI) ReadPiece(ctx context.Context, piece cid.Cid) (*types.PieceReader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadPiece", ctx, piece)
	ret0, _ := ret[0].(*types.PieceReader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadPiece indicates an expected call of ReadPiece.
func (mr *MockPieceAPIMockRecorder) ReadPiece(ctx, piece any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadPiece", reflect.TypeOf((*MockPieceAPI)(nil).ReadPiece), ctx, piece)
}

// UploadPiece mocks base method.
func (m *MockPieceAPI) UploadPiece(ctx context.Context, upload types.PieceUpload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadPiece", ctx, upload)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadPiece indicates an expected call of UploadPiece.
func (mr *MockPieceAPIMockRecorder) UploadPiece(ctx, upload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadPiece", reflect.TypeOf((*MockPieceAPI)(nil).UploadPiece), ctx, upload)
}
