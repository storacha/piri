// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/storacha/piri/pkg/pdp/tasks (interfaces: MessageWatcherEthClient)
//
// Generated by this command:
//
//	mockgen -destination=./internal/mocks/message_watcher_eth_client.go -package=mocks github.com/storacha/piri/pkg/pdp/tasks MessageWatcherEthClient
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	common "github.com/ethereum/go-ethereum/common"
	types "github.com/ethereum/go-ethereum/core/types"
	gomock "go.uber.org/mock/gomock"
)

// MockMessageWatcherEthClient is a mock of MessageWatcherEthClient interface.
type MockMessageWatcherEthClient struct {
	ctrl     *gomock.Controller
	recorder *MockMessageWatcherEthClientMockRecorder
	isgomock struct{}
}

// MockMessageWatcherEthClientMockRecorder is the mock recorder for MockMessageWatcherEthClient.
type MockMessageWatcherEthClientMockRecorder struct {
	mock *MockMessageWatcherEthClient
}

// NewMockMessageWatcherEthClient creates a new mock instance.
func NewMockMessageWatcherEthClient(ctrl *gomock.Controller) *MockMessageWatcherEthClient {
	mock := &MockMessageWatcherEthClient{ctrl: ctrl}
	mock.recorder = &MockMessageWatcherEthClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageWatcherEthClient) EXPECT() *MockMessageWatcherEthClientMockRecorder {
	return m.recorder
}

// TransactionByHash mocks base method.
func (m *MockMessageWatcherEthClient) TransactionByHash(ctx context.Context, hash common.Hash) (*types.Transaction, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransactionByHash", ctx, hash)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// TransactionByHash indicates an expected call of TransactionByHash.
func (mr *MockMessageWatcherEthClientMockRecorder) TransactionByHash(ctx, hash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransactionByHash", reflect.TypeOf((*MockMessageWatcherEthClient)(nil).TransactionByHash), ctx, hash)
}

// TransactionReceipt mocks base method.
func (m *MockMessageWatcherEthClient) TransactionReceipt(ctx context.Context, txHash common.Hash) (*types.Receipt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransactionReceipt", ctx, txHash)
	ret0, _ := ret[0].(*types.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransactionReceipt indicates an expected call of TransactionReceipt.
func (mr *MockMessageWatcherEthClientMockRecorder) TransactionReceipt(ctx, txHash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransactionReceipt", reflect.TypeOf((*MockMessageWatcherEthClient)(nil).TransactionReceipt), ctx, txHash)
}
