# Complete Tofu Variables Template for Single-Instance Piri Deployment
# ===========================================================================
# This template includes ALL available variables with detailed explanations.
# Required variables are marked with [REQUIRED]
# Optional variables show their default values and can be left commented out

# ===========================================================================
# NOTES AND BEST PRACTICES
# ===========================================================================
# 1. DOMAIN NAMING:
#    - Full domain format: {environment}.{app}.{root_domain}
#    - Example: staging.piri.pdp.storacha.network
#    - The domain must have a valid Route53 hosted zone
#
# 2. SECRETS MANAGEMENT:
#    - For production, always use AWS Secrets Manager (use_secrets_manager = true)
#    - Store secrets with path: {environment}/piri/{instance_name}/service-key
#    - Never commit actual secrets to version control
#
# 3. INSTANCE SIZING:
#    - It is recommended to use the m6a instance class for the following reasons:
#        - They support sha extensions, which improves the performance of the filecoin CommP hash function
#        - Different instance classes require different logic for volume mounting.
#          For m6a instances, EBS volumes appear as NVMe devices, this tofu only supports mounting such devices.
#          See deploy/full-node/modules/piri-instance/scripts/user-data.sh.tpl for mounting logic.
#
# 4. STORAGE SIZING:
#    - EBS volumes can be expanded later but not shrunk
#    - Start conservative and expand as needed
#
# 5. VERSION MANAGEMENT:
#    - Production: Use specific version tags (e.g., "v0.0.12")
#    - Staging: Can use "main" branch for latest stable
#    - Development: Use feature branches for testing
#
# 6. SSL CERTIFICATES:
#    - Certificates are automatically obtained via Let's Encrypt
#    - Ensure the domain points to the instance before deployment
#    - The operator_email is used for certificate notifications
#
# 7. MONITORING:
#    - Check CloudInit logs in: /var/log/clout-init-output.log
#    - Service logs: sudo journalctl -u piri -f
#    - Nginx logs: /var/log/nginx/access.log and error.log
#

# ===========================================================================
# AWS CONFIGURATION
# ===========================================================================

# AWS account ID(s) allowed to run this tofu
# Default: "505595374361" - uncomment to override
# allowed_account_ids = ["YOUR_AWS_ACCOUNT_ID"]

# AWS region where resources will be deployed
# Default: "us-west-2" - uncomment to override
# Note: Secrets used by this deployment are in us-west-2, if you chose a different region
#          secrets must be copied to that region, or secret replication must be enabled.
#          Else you may forgo the secret manager, see use_secrets_manager, and supply your own inline (insecurely)
# region = "us-west-2"

# ===========================================================================
# DEPLOYMENT CONFIGURATION
# ===========================================================================

# Environment name (e.g., dev, staging, prod)
# Used in resource naming and secret paths
# Also forms part of the domain: {environment}.{app}.{root_domain}
# Default: "staging" - uncomment to override
# environment = "staging"

# Application name
# Forms part of the domain: {environment}.{app}.{root_domain}
# Default: "piri" - uncomment to override
# app = "piri"

# Root domain for the deployment
# The full domain will be: {environment}.{app}.{root_domain}
# Example: staging.piri.pdp.storacha.network
# Default: "pdp.storacha.network" - uncomment to override
# Note: "pdp.storacha.network" is a hosted zone in AWS, since storacha.network is managed by cloudflare, changing
#          this value is non-trival. It is strongly recommended to leve this as the default.
# root_domain = "pdp.storacha.network"

# SSH key pair name for EC2 instance access
# Must exist in the specified AWS region
# Default: "warm-storage-staging" - uncomment to override
# Note: This SSH key may be found in the storacha 1password vault.
# key_name = "warm-storage-staging"

# ===========================================================================
# ORGANIZATION TAGS
# ===========================================================================
# These tags are applied to all resources for billing/organization

# Resource owner identifier
# Default: "storacha" - uncomment to override
# owner = "storacha"

# Team managing the resources
# Default: "Storacha Engineer" - uncomment to override
# team = "Storacha Engineer"

# Organization name
# Default: "Storacha" - uncomment to override
# org = "Storacha"

# ===========================================================================
# INSTANCE CONFIGURATION
# ===========================================================================

# EC2 instance type
# Common options:
#   - m6a.large (2 vCPU, 8 GB RAM): Development/testing
#   - m6a.xlarge (4 vCPU, 16 GB RAM): Standard production
#   - m6a.2xlarge (8 vCPU, 32 GB RAM): High-performance production
# Default: "m6a.xlarge" - uncomment to override
# instance_type = "m6a.xlarge"

# EBS volume size in GB for data storage
# Recommendations:
#   - 50-100 GB: Development/testing
#   - 200-500 GB: Standard production
#   - 500+ GB: High-volume production
# Default: 200 - uncomment to override
# ebs_volume_size = 200

# ===========================================================================
# INSTALLATION CONFIGURATION
# ===========================================================================

# [REQUIRED] Installation method: "version" (for releases) or "branch" (build from source)
# No default - you must specify
install_method = "version"  # or "branch"

# [REQUIRED] Installation source
# For install_method = "version": use version tag (e.g., "v0.0.12")
# For install_method = "branch": use branch name (e.g., "main", "dev", "feature/xyz")
# No default - you must specify
install_source = "v0.0.12"  # or "main" for branch

# ===========================================================================
# PDP (PROOF DATA PROCESSOR) CONFIGURATION
# ===========================================================================

# [REQUIRED] Lotus WebSocket endpoint for blockchain interaction
# No default - you must provide this
# Note: The storacha team runs a lotus gateway, reach-out in discord if you would like access.
pdp_lotus_endpoint = "wss://YOUR_LOTUS_ENDPOINT/rpc/v1"

# PDP smart contract address
# Default: "0x6170dE2b09b404776197485F3dc6c968Ef948505" - uncomment to override
# Note: This address is defined here: https://github.com/FilOzone/pdp/?tab=readme-ov-file#v110 it is strongly recommended
#       to use this default.
# pdp_contract_address = "0x6170dE2b09b404776197485F3dc6c968Ef948505"

# Registrar service URL for node registration
# Default: "https://staging.registrar.storacha.network" - uncomment to override
# registrar_url = "https://staging.registrar.storacha.network"

# ===========================================================================
# OPERATOR CONFIGURATION
# ===========================================================================

# [REQUIRED] Email address of the node operator
# Used for SSL certificate registration and operator contact
# No default - you must provide this
operator_email = "your-email@example.com"

# ===========================================================================
# SECRETS MANAGEMENT
# ===========================================================================

# Option 1: AWS Secrets Manager (Recommended)
# --------------------------------------------------------
# Note: Secrets used by this deployment are in us-west-2, if you chose a different region
#       secrets must be copied to that region, or secret replication must be enabled.
#       Else you may forgo the secret manager, see use_secrets_manager, and supply your own inline (insecurely)
# Set this to true to fetch secrets from AWS Secrets Manager
# Secrets should be stored at:
#   - {environment}/piri/primary/service-key
#   - {environment}/piri/primary/wallet-key
# Default: true - uncomment to disable
# use_secrets_manager = false

# Option 2: Inline Secrets (Development Only)
# -------------------------------------------
# If use_secrets_manager = false, you MUST provide these:

# [REQUIRED if use_secrets_manager = false] Service private key
service_pem_content = <<EOF
-----BEGIN PRIVATE KEY-----
YOUR_SERVICE_PRIVATE_KEY_HERE
-----END PRIVATE KEY-----
EOF

# [REQUIRED if use_secrets_manager = false] Wallet private key in hex format
wallet_hex_content = "YOUR_WALLET_PRIVATE_KEY_HEX_HERE"

# ===========================================================================
# EXAMPLE CONFIGURATIONS
# ===========================================================================

# -------------------------------------------
# Example 1: Production with AWS Secrets Manager
# -------------------------------------------
# allowed_account_ids = ["123456789012"]
# region              = "us-west-2"
# environment         = "prod"
# instance_type       = "m6a.2xlarge"
# ebs_volume_size     = 500
# install_method      = "version"
# install_source      = "v0.0.12"
# pdp_lotus_endpoint  = "wss://api.node.glif.io/rpc/v1"
# operator_email      = "ops@example.com"
# use_secrets_manager = true

# -------------------------------------------
# Example 2: Staging with inline secrets
# -------------------------------------------
# allowed_account_ids = ["123456789012"]
# environment         = "staging"
# install_method      = "branch"
# install_source      = "main"
# pdp_lotus_endpoint  = "wss://api.calibration.node.glif.io/rpc/v1"
# operator_email      = "dev@example.com"
# service_pem_content = <<EOF
# -----BEGIN PRIVATE KEY-----
# ...key content...
# -----END PRIVATE KEY-----
# EOF
# wallet_hex_content  = "...wallet content..."

# -------------------------------------------
# Example 3: Development with minimal resources
# -------------------------------------------
# allowed_account_ids = ["123456789012"]
# environment         = "dev"
# instance_type       = "m6a.large"
# ebs_volume_size     = 50
# install_method      = "branch"
# install_source      = "feature/new-feature"
# pdp_lotus_endpoint  = "wss://api.calibration.node.glif.io/rpc/v1"
# operator_email      = "dev@example.com"
# use_secrets_manager = true

# ===========================================================================
# DEPLOYMENT COMMANDS
# ===========================================================================
# 
# 1. Initialize Tofu:
#    tofu init
#
# 2. Create workspace (optional, for multiple deployments):
#    tofu workspace new production
#    tofu workspace select production
#
# 3. Review plan:
#    tofu plan
#
# 4. Apply configuration:
#    tofu apply
#
# 5. Get outputs (after deployment):
#    tofu output
#
# 6. SSH to instance:
#    tofu output -raw ssh_command | sh
#
# 7. Destroy resources:
#    tofu destroy